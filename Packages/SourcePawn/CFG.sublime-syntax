%YAML 1.2
---
name: Config
file_extensions: [cfg]
scope: source.cfg

variables:
  end_of_line: '(?=(?:\r\n?|\n))'
  const_char_escape: \\(?:(?:[abefnrtv'"%\\]|(?:x[a-fA-F0-9]{0,2}|(?:[01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5]));?)|\n)

contexts:
  main:
    - include: expressions

  expressions:
    - match: \"
      scope: punctuation.definition.string.begin.cfg
      push:
        - meta_scope: string.quoted.double.cfg
        - match: '({{const_char_escape}})|(\\.)'
          captures:
            1: constant.character.escape.cfg
            2: invalid.illegal.unexpected-character.cfg
        - match: \"
          scope: punctuation.definition.string.end.cfg
          pop: true
        - match: \s*\\$
          scope: punctuation.separator.continuation.cfg
        - match: \s*$
          scope: invalid.illegal.unexpected-eol.cfg
          pop: true

    - match: \/\*
      captures:
        0: punctuation.definition.comment.begin.cfg
      push:
        - meta_scope: comment.block.cfg
        - match: \*\/
          scope: punctuation.definition.comment.end.cfg
          pop: true

    - match: '\/\/'
      scope: puncutation.definition.comment
      push:
        - meta_scope: comment.line.cfg
        - match: \\{{end_of_line}}
          scope: punctuation.separator.continuation.cfg
        - match: '{{end_of_line}}'
          pop: true
        - match: '\b(TODO|FIXME|NOTE|BUG|XXX|HACK|IDEA|NOTICE)\b(?:\s*[-:])?'
          scope: keyword.other.documentation.note.cfg

    - match: (?:\s|^)(\d+\.?\d*)([^\d\s]+)?\s
      captures:
        1: constant.numeric
        2: invalid.illegal

    - match: \}
      scope: invalid.illegal.cfg

    - match: \{
      scope: punctuation.section.block.begin.cfg
      push:
        - meta_scope: meta.braces.cfg
        - match: \}
          scope: punctuation.section.block.end.cfg
          pop: true

        - include: expressions
