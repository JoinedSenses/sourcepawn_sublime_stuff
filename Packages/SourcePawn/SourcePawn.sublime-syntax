%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - sp
  - inc
scope: source.sp

variables:
  numerals_binary: '\b0b[01]+\b'
  numerals_hex: '\b0x[0-9a-fA-F]{0,8}\b'
  numerals_intfloat: '\b\d+(\.\d*)?(e-?\d*)?\b'
  numerals: '{{numerals_binary}}|{{numerals_hex}}|{{numerals_intfloat}}'

  identifier: '(?:[[:alpha:]_]\w*)'
  deprecated_identifier: '\b{{identifier}}:'
  casts: 'view_as'
  modifier_decl: 'public[ \t]+native|stock|native|forward|static'
  operator_method_name: '\boperator\s*[-+*/%^&|~!=<>]|[-+*/%^&|=!<>]=|<<=?|>>=?|&&|\|\||\+\+|--|,|->\*?|\(\)|\[\]'
  control_keywords: 'break|case|continue|default|do|else|for|if|return|switch|while'
  memory_operators: 'new|delete'
  basic_types: 'any|bool|char|float|int|void'
  before_tag: 'enum|enum\s+struct|methodmap|struct'
  storage_classes: 'static|native|forward|public|stock|function'
  type_qualifier: 'const'
  directives: 'include|pragma|define|error|if|file|endif|endinput'
  pragmas: 'ctrlchar|dynamic|newdecls|rational|semicolon|tabsize|unused'
  pragma_derecated: 'deprecated'
  pragma_newdecls: 'required|optional'
  end_of_line: '(?<!\\)(\\\\)*$(?=\n)'

contexts:
  main:
    - include: preprocessor-global
    - include: global


  preprocessor-global:
    - include: preprocessor-rule-enabled-global

  global:

    - include: preprocessor-expressions
    - include: constants
    - include: typedef_set
    - include: strings
    - include: comments
    - include: keywords
    - include: types
    - include: functions


  keywords:
    - match: \bbreak\b
      scope: keyword.control.flow.break.sp
    - match: \bcontinue\b
      scope: keyword.control.flow.continue.sp
    - match: \breturn\b
      scope: keyword.control.flow.return.sp
    - match: '{{control_keywords}}'
      scope: keyword.control.sp
    - match: '\b(?:sizeof|cellsof|tagof)\b'
      scope: keyword.operator.word.c

  expressions:
    - include: early-expressions
    - include: late-expressions

  early-expressions:
    - include: preprocessor-expressions
    - include: comments
    - include: parens

  late-expressions:
    - include: types

  preprocessor-expressions:
    - include: preprocessor-macro-define
    - include: pragma
    - include: preprocessor-other

  preprocessor-macro-define:
    - match: '^\s*(#)(\s*)(define)\b'
      captures:
        1: meta.preprocessor.sp
        2: invalid.illegal.sp
        3: meta.preprocessor.sp keyword.control.import.define.sp
      push:
        - meta_scope: meta.preprocessor.sp
        - include: comments
        - match: '[^[:alpha:]_\s]+'
          scope: invalid.deprecated.sp
        - match: '({{identifier}})(?=\()'
          captures:
            1: entity.name.function.preprocessor.c
          set:
            - match: '\('
              scope: punctuation.section.group.begin.sp
              set: preprocessor-macro-params
            - match: $
              pop: true


        - match: '({{identifier}})'
          captures:
           1: entity.name.constant.sp
          push:
            - meta_scope: meta.preprocessor.sp
            - include: comments
            - include: strings
            - include: constants
            - match: '{{end_of_line}}'
              pop: true
        - match: '{{end_of_line}}'
          pop: true

  preprocessor-macro-params:
    - meta_scope: meta.preprocessor.macro.parameters.sp meta.group.sp
    - match: \)
      scope: punctuation.section.group.end.sp
      set: preprocessor-macro-definition

  preprocessor-macro-definition:
    - meta_content_scope: meta.preprocessor.macro.sp
    - include: preprocessor-line-continuation

  preprocessor-line-continuation:
    - match: '(?<!\\)(?:\\\\)*(\\)$(?=\n)'
      captures:
        1: punctuation.separator.continuation.sp
    - match: \\([ \t]+?)$
      captures:
        1: invalid.illegal.space-after-continuation.sp

  preprocessor-comments:
    - match: (?<!\\)(\\\\)*\/\*
      scope: punctuation.definition.comment.begin.sp
      push:
        - meta_scope: comment.block.sp
        - match: (?<!\\)(?:\\\\)*(\\)$(?=\n)
          scope: punctuation.separator.continuation.sp
        - match: \*\/
          scope: punctuation.definition.comment.end.sp
          pop: true
    - match: \/\/
      scope: punctuation.definition.comment.sp
      push:
        - meta_scope: comment.line.double-slash.sp
        - match: (?<!\\)(?:\\\\)*(\\)$(?=\n)
          captures:
            1: punctuation.separator.continuation.sp
          pop: true
        - match: '{{end_of_line}}'
          pop: true

  # TODO: Finish
  pragma:
    - match: '^[ \t]*(#)(\s*)(pragma)\b'
      captures:
        1: meta.preprocessor.sp
        2: invalid.illegal.sp
        3: keyword.control.import.pragma

  preprocessor-other:
    - match: '^[ \t]*(#)(\s*)((?:else)?if)\b'
      captures:
        1: meta.preprocessor.sp
        2: invalid.illegal.sp
        3: meta.preprocessor.sp
      push:
        - meta_scope: meta.preprocessor.sp
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        - match: \bdefined\b
          scope: keyword.control.sp
        - match: '{{end_of_line}}'
          pop: true

    - match: '^[ \t]*(#)(\s*)(endif|endinput)\b'
      captures:
        1: meta.preprocessor.sp
        2: invalid.illegal.sp
        3: meta.preprocessor.sp
      push:
        - meta_scope: meta.preprocessor.sp
        - include: preprocessor-line-continuation
        - include: comments
        - match: (\S+?)(?=$|\/\*|\/\/|\b|\s)
          captures:
            1: invalid.illegal.sp
        - match: '{{end_of_line}}'
          pop: true






  # preprocessor-macro-params:

  typedef_set:
    - match: \btypedef\b
      scope: keyword.declaration.function.sp
      push:
      - match: $\n
        pop: true
      - match: '(?:[ \t]+\b([^[:alpha:]_]+)?({{identifier}})(?:[ \t]*(=)(?:[ \t]*(function)(?:[ \t]+({{identifier}})[ \t]*)?)?)?)?'
        captures:
          1: invalid.illegal.sp
          2: entity.name.type
          3: keyword.operator.assignment.sp
          4: storage.modifier.sp
          5: storage.type.sp
      - include: parens



  parens:
    - match: \(
      scope: punctuation.section.group.begin.sp
      push:
        - meta_scope: meta.group.sp
        - match: \)
          scope: punctuation.section.group.end.sp
          pop: true
        - include: expressions


  types:
    - match: '\b({{basic_types}})\b'
      scope: storage.type.sp
    - match: '{{identifier}}:[^:]'
      scope: invalid.deprecated.sp


  constants:
    - match: '\b(true|false|null)\b'
      captures:
        1: constant.language.sp
    - match: \b(__LINE__)\b
      captures:
        1: support.constant.sp
    - match: '{{numerals}}'
      scope: constant.numeric.sp
    - match: '\b[A-Z_][A-Z_]+\b'
      scope: variable.constant.sp

  strings:
    - match: (?<!\\)(\\\\)*\"
      push:
        - meta_scope: string.quoted.double.sp
        - match: (?<!\\)(\\\\)*\"
          pop: true
        # - match: '{{constant_placeholder}}'
        #   scope: constant.other.placeholder.sp
        # - match: '{{constant_character_escape}}'
        #   scope: constant.character.escape.sp
    - match: (?<!\\)(\\\\)*\'
      push:
        - meta_scope: string.quoted.single.sp
        - match: (?<!\\)(\\\\)*\'
          pop: true
        # - match: '{{constant_placeholder}}'
        #   scope: constant.other.placeholder.sp
        # - match: '{{constant_character_escape}}'
        #   scope: constant.character.escape.sp

  comments:
    - match: (?<!\\)(\\\\)*\/\*
      captures:
        0: punctuation.definition.comment.begin.sp
      push:
        - meta_scope: comment.block.sp
        - match: \*\/
          captures:
            0: punctuation.definition.comment.end.sp
          pop: true
        - match: (@(?:return|noreturn|note|section|endsection|error))
          scope: keyword
        - match: (@param)(?:\s+)([A-Za-z_@.][A-Za-z0-9_@.]*+|...)
          captures:
            1: keyword.operator
            2: variable.parameter
        - match: (@deprecated.*?)[ \t]*(\*\/|$)
          captures:
            1: invalid.deprecated
            2: punctuation.definition.comment

    - match: '\/\/'
      scope: puncutation.definition.comment
      push:
        - meta_scope: comment
        - match: '{{end_of_line}}'
          pop: true
        - match: \@(?:return|noreturn|note|section|endsection|error)
          scope: keyword
        - match: (@param)\s+([A-Za-z_@.][A-Za-z0-9_@.]*+|...)
          captures:
            1: keyword.operator
            2: variable.parameter
        - match: (@deprecated).*[ \t]*$
          scope: invalid.deprecated

  # should be near the end?
  functions:
    - match: '[ \t]*(?:({{modifier_decl}})[ \t]+)?(?:({{deprecated_identifier}})|({{identifier}}))(?<!{{control_keywords}})[ \t]+({{identifier}})[ \t]*(?=\()'
      captures:
        1: storage.modifier.sp
        2: invalid.deprecated.sp
        3: storage.type.sp
        4: entity.name.function.sp
