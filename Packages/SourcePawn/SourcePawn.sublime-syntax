%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: SourcePawn
file_extensions:
  - sp
  - inc
scope: source.sp

variables:
  numerals_binary: '\b0b[01]+\b'
  numerals_hex: '\b0x[0-9a-fA-F]{0,8}\b'
  numerals_intfloat: '\b\d+(\.\d*)?(e-?\d*)?\b'
  numerals: '{{numerals_binary}}|{{numerals_hex}}|{{numerals_intfloat}}'

  identifier: '(?:\b[[:alpha:]_]\w*\b)'
  control_keywords: 'break|case|continue|default|do|else|for|if|return|switch|while'
  end_of_line: '(?<!\\)(\\\\)*\K$(?=\n)'
  str_format_char: '%[!\-\d\.]*[%bcdfiLNstTuxX]?'
  const_char_escape: \\(?:[abefnrt'"%\\]|(?:x[a-zA-Z0-9]{0,2}|\d+);?)

  operator: (?:operator(?:\*|/|\+\+?|--?|!=?|>=?|<=?|==|%))

  global_decl_lookahead: (?=\s*(public|stock|static|forward|native|enum|struct|methodmap|typedef|typeset|functag|funcenum|new|decl)\b)
  local_lookahead: \b(?:if|else|for|while|do|return|switch|case|continue|break|delete|new|decl|static|const|sizeof|cellsof|tagof)\b
  invalid_var_lookahead: (?=[;\)\}])|{{global_decl_lookahead}}|(?={{local_lookahead}})|(?=\s*{{identifier}}(?:\s*\(|\s+{{identifier}}))

  # Overkill. I have a formatted version with comments for maintenance
  ALL_CONSTANTS: \b(?:T(?:F(?:C(?:ond_(?:H(?:a(?:lloween(?:Kart(?:NoTurn|Cage|Dash)?|G(?:hostMode|iant)|T(?:hriller|iny)|SpeedBoost|CritCandy|QuickHeal|BombHead|HellHeal|InHell)|sRune)|ealing(?:Debuff)?)|R(?:une(?:Re(?:sist|gen)|Imbalance|Precision|Knockout|Strength|Agility|Vampire|Warlock|Haste)|e(?:strictToMelee|programmed|genBuffed)|adiusHealOnDamage|ocketPack)|C(?:rit(?:On(?:F(?:lagCapture|irstBlood)|Damage|Kill|Win)|C(?:anteen|ola)|DemoCharge|RuneTemp|Mmmph|Hype)|ompetitive(?:Winner|Loser)|loak(?:Flicker|ed)|harging)|S(?:mall(?:B(?:ulletResist|lastResist)|FireResist)|p(?:eedBuffAlly|awnOutline)|wimming(?:NoEffects|Curse)|tealthed(?:UserBuffFade)?|upernovaRune|apped|lowed)|D(?:e(?:fenseBuff(?:NoCritBlock|Mmmph|ed)|adRingered|moBuff)|isguis(?:e(?:d(?:AsDispenser)?|Removed)|ing)|odgeChance|azed)|P(?:a(?:sstime(?:PenaltyDebuff|Interception)|rachute(?:Deployed)?)|owerupModeDominant|lague(?:Rune)?|reventDeath)|U(?:ber(?:charge(?:d(?:OnTakeDamage|Canteen|Hidden)?|Fading)|B(?:ulletResist|lastResist)|FireResist)|nknown[12])|M(?:e(?:digunDebuff|leeOnly|gaHeal)|arkedForDeath(?:Silent)?|i(?:niCritOnKill|lked)|VMBotRadiowave)|B(?:l(?:ast(?:Jumping|Immune)|eeding)|u(?:lletImmune|rningPyro|ffed)|alloonHead|onked)|G(?:rappl(?:ingHook(?:Bleeding|SafeFall|Latched)?|ed(?:ByPlayer|ToPlayer))|as)|T(?:eleport(?:edGlow|ing)|mpDamageBonus|aunting)|K(?:ing(?:Aura|Rune)|nockedIntoAir|ritzkrieged)|No(?:Taunting_DEPRECATED|HealingDamageBuff)|F(?:reezeInput|ireImmune|ocusBuff)|O(?:bscuredSmoke|verhealed|nFire)|A(?:fterburnImmune|irCurrent)|EyeaductUnderworld|InHealRadius|LostFooting|Jarated|Zoomed)|lass_(?:S(?:oldier|niper|cout|py)|Engineer|DemoMan|Unknown|Heavy|Medic|Pyro))|Resource_(?:D(?:e(?:fenses|aths)|ominations)|B(?:uildingsDestroyed|ackstabs)|Re(?:supplyPoints|venge)|T(?:otalScore|eleports)|Hea(?:lPoints|dshots)|P(?:layerClass|ing)|KillAssists|MaxHealth|Captures|Invulns|Score)|Holiday_(?:Halloween(?:OrFullMoon(?:OrValentines)?)?|C(?:ommunityUpdate|hristmas)|ValentinesDay|EndOfTheLine|MeetThePyro|AprilFools|Birthday|FullMoon|Invalid|Soldier)|Object(?:_(?:S(?:apper|entry)|CartDispenser|Teleporter|Dispenser)|Mode_(?:E(?:ntrance|xit)|None))|WeaponSlot_(?:P(?:rimary|DA)|Secondary|Building|Item[12]|Grenade|Melee)|Team_(?:Unassigned|Spectator|Blue|Red))|opMenu(?:Action_(?:D(?:isplay(?:Option|Title)|rawOption)|RemoveObject|SelectOption)|Position_(?:Last(?:Category|Root)|Start)|Object_(?:Category|Item))|hisPointer_(?:CBaseEntity|Address|Ignore))|C(?:S(?:Weapon_(?:K(?:NIFE(?:_(?:S(?:URVIVAL_BOWIE|KELETON|TILETTO)|G(?:YPSY_JACKKNIFE|HOST|UT|G)|C(?:LASSIC|ANIS|ORD)|F(?:ALCHION|LIP)|T(?:ATICAL)?|M9_BAYONET|WIDOWMAKER|BUTTERFLY|KARAMBIT|OUTDOOR|URSUS|PUSH))?|EVLAR)|M(?:A(?:X_WEAPONS(?:_NO_KNIFES)?|C10|G7)|4A1(?:_SILENCER)?|P(?:5NAVY|7|9)|OLOTOV|ELEE|249|3)|S(?:C(?:AR(?:17|20)|OUT)|MOKEGRENADE|G55[026]|AWEDOFF|NOWBALL|PANNER|HIELD|SG08)|H(?:E(?:A(?:VYASSAULTSUIT|LTHSHOT)|GRENADE)|KP2000|AMMER)|F(?:I(?:VESEVEN|REBOMB|STS)|RAGGRENADE|LASHBANG|AMAS)|B(?:REACHCHARGE|UMPMINE|AYONET|IZON)|T(?:A(?:GGRENADE|BLET|SER)|EC9|MP)|D(?:E(?:FUSER|AGLE|COY)|IVERSION)|N(?:IGHTVISION|O(?:NE|VA)|EGEV)|A(?:SSAULTSUIT|K47|UG|WP|XE)|G(?:ALIL(?:AR)?|3SG1|LOCK)|U(?:SP(?:_SILENCER)?|MP45)|C(?:UTTERS|Z75A|4)|P(?:2(?:28|50)|90)|INCGRENADE|REVOLVER|XM1014|ELITE)|RoundEnd_(?:T(?:errorist(?:s(?:S(?:urrender|topped)|NotEscaped|Escaped|Planted)|Win)|arget(?:Bombed|Saved))|CT(?:S(?:toppedEscape|urrender)|sReachedHostage|Win)|VIP(?:NotEscaped|Escaped|Killed)|Hostages(?:NotRescued|Rescued)|BombDefused|GameStart|Draw))|o(?:okie(?:Menu(?:Action_(?:DisplayOption|SelectOption)|_(?:OnOff(?:_Int)?|YesNo(?:_Int)?))|Access_P(?:r(?:otected|ivate)|ublic))|nVar(?:Query_(?:Not(?:Found|Valid)|Cancelled|Protected|Okay)|Bound_(?:Lower|Upper))|mmand_(?:Allow|Deny))|allConv_(?:FASTCALL|THISCALL|STDCALL|CDECL))|S(?:DK(?:Hook_(?:Weapon(?:Can(?:SwitchTo(?:Post)?|Use(?:Post)?)|Switch(?:Post)?|Equip(?:Post)?|Drop(?:Post)?)|S(?:tartTouch(?:Post)?|pawn(?:Post)?|houldCollide|etTransmit)|T(?:raceAttack(?:Post)?|hink(?:Post)?|ouch(?:Post)?)|P(?:ostThink(?:Post)?|reThink(?:Post)?)|G(?:roundEntChangedPost|etMaxHealth)|OnTakeDamage(?:Alive(?:Post)?|Post)?|VPhysicsUpdate(?:Post)?|CanBeAutobalanced|EndTouch(?:Post)?|Blocked(?:Post)?|FireBulletsPost|Reload(?:Post)?|Use(?:Post)?)|C(?:all_(?:S(?:erver|tatic)|Entity(?:List)?|GameRules|Player|Raw)|onf_(?:Signature|Address|Virtual))|Type_(?:CBase(?:Entity|Player)|PlainOldData|QAngle|String|Vector|Edict|Float|Bool)|Pass_(?:P(?:ointer|lain)|By(?:Value|Ref))|Library_(?:Engine|Server))|MC(?:Error_(?:Invalid(?:Section[12345]|Property1|Tokens)|Stream(?:Error|Open)|TokenOverflow|Custom|Okay)|Parse_(?:Halt(?:Fail)?|Continue))|ort_(?:Descending|Ascending|Integer|Random|String|Float))|M(?:enu(?:Action_(?:D(?:isplay(?:Item)?|rawItem)|Vote(?:Cancel|Start|End)|S(?:elect|tart)|Cancel|End)|S(?:ource_(?:No(?:rmal|ne)|External|RawPanel)|tyle_(?:Default|Radio|Valve))|Cancel_(?:Exit(?:Back)?|Disconnected|Interrupted|NoDisplay|Timeout)|End_(?:Voting(?:Cancelled|Done)|Exit(?:Back)?|Cancelled|Selected))|RES_(?:Changed(?:Override|Handled)|Supercede|Override|Handled|Ignored)|a(?:pChange_(?:RoundEnd|Instant|MapEnd)|xClients))|P(?:l(?:ugin_(?:C(?:ontinue|hanged|reated)|E(?:victed|rror)|Uncompiled|BadLoad|Handled|Running|Failed|Loaded|Paused|Stop)|Info_(?:Description|Version|Author|Name|URL))|rop(?:Field_(?:V(?:ariant|ector)|String(?:_T)?|Unsupported|Integer|Entity|Float)|_(?:Data|Send))|a(?:ram_(?:Float(?:ByRef)?|Cell(?:ByRef)?|A(?:rray|ny)|VarArgs|String)|th_SM))|R(?:oundState_(?:R(?:oundRunning|estart)|B(?:etweenRounds|onus)|Sta(?:lemate|rtGame)|Pre(?:round|game)|GameOver|TeamWin|Init)|eturnType_(?:C(?:BaseEntity|harPtr)|V(?:ector(?:Ptr)?|oid)|String(?:Ptr)?|Unknown|Edict|Float|Bool|Int)|a(?:ngeType_(?:Audibility|Visibility)|yType_(?:EndPoint|Infinite)))|D(?:Hook(?:Register_(?:E(?:B[PX]|D[IX]|S[IP]|AX|CX)|D(?:efault|H|L)|XMM[01234567]|A[HL]|B[HL]|C[HL]|ST0)|Pass_(?:O(?:ASSIGNOP|CTOR|DTOR)|By(?:Ref|Val)))|B(?:Val_(?:TypeMismatch|Error|Data|Null)|Bind_(?:String|Float|Int)|Prio_(?:Normal|High|Low))|ialogType_(?:M(?:enu|sg)|AskConnect|Entry|Text))|A(?:d(?:min(?:_(?:C(?:h(?:a(?:ngemap|t)|eats)|on(?:vars|fig)|ustom[123456])|R(?:eservation|CON|oot)|Password|Generic|Unban|Kick|Slay|Vote|Ban)|Cache_(?:Overrides|Admins|Groups))|dress_Null)|PLRes_(?:S(?:ilentFailure|uccess)|Failure)|uthId_(?:Steam(?:ID64|2|3)|Engine)|ccess_(?:Effective|Real))|E(?:ngine_(?:Bl(?:a(?:ckMesa|de)|oodyGoodTime)|D(?:O(?:DS|TA|I)|arkMessiah)|S(?:ourceSDK200[67]|DK2013)|C(?:S(?:GO|S)|ontagion)|Left4Dead2?|NuclearDawn|AlienSwarm|Insurgency|Original|Portal2|Unknown|HL2DM|EYE|TF2)|ventHookMode_P(?:ost(?:NoCopy)?|re)|T_(?:Ignore|Single|Event|Hook))|F(?:i(?:leT(?:ime_(?:Last(?:Access|Change)|Created)|ype_(?:Directory|Unknown|File))|ndMap_(?:No(?:nCanonical|tFound)|F(?:uzzyMatch|ound)|PossiblyAvailable))|eature(?:Status_(?:Un(?:available|known)|Available)|Type_(?:Capability|Native)))|Hook(?:ParamType_(?:C(?:BaseEntity|harPtr)|Object(?:Ptr)?|String(?:Ptr)?|VectorPtr|Unknown|Edict|Float|Bool|Int)|Type_(?:GameRules|Entity|Raw)|_P(?:ost|re))|O(?:bjectValueType_(?:C(?:BaseEntityPtr|harPtr)|Ehandle(?:Ptr)?|Vector(?:Ptr)?|Float(?:Ptr)?|Bool(?:Ptr)?|Int(?:Ptr)?|String)|verride_Command(?:Group)?)|N(?:ominate_(?:A(?:lreadyInVote|dded)|InvalidMap|Replaced|VoteFull)|etFlow_(?:Incoming|Outgoing|Both)|umberType_Int(?:16|32|8))|KvData_(?:N(?:UMTYPES|one)|WString|String|UInt64|Color|Float|Int|Ptr)|I(?:dentity_(?:Extension|Plugin|Core)|mmunity_(?:Default|Global))|Listen(?:Type_(?:Created|Deleted)|_(?:Default|Yes|No))|U(?:se_(?:O(?:ff|n)|Toggle|Set)|M_(?:Protobuf|BitBuf))|VoteCancel_(?:Generic|NoVotes)|return)\b

# ---------------------------------------------------------------------------

contexts:
  main:
    # - match: ''
    - include: global
    - include: expressions

# ---------------------------------------------------------------------------

  global:
    - include: struct
    - include: enum
    - include: methodmap
    - include: functag
    - include: funcenum
    - include: typedef
    - include: typeset
    - include: native-forward
    - include: public-var
    - include: public
    - include: variable-decl-oldsyntax
    - include: function-decl # no multiline because this sucks to match.
    - include: variable-decl

  expressions:
    - include: early-expressions
    - include: late-expressions

  early-expressions:
    - include: preprocessor
    - include: comments
    - include: variable-decl-oldsyntax # this has to show up before 'new' is introduced
    - include: case-default
    - include: unique-keywords
    - include: constants
    - include: strings
    - include: operators
    - include: parens
    - include: brackets
    - include: braces
    - include: retag
    - include: accessor
    - include: variable-usage-early
    - match: ','
      scope: punctuation.separator.sp
    - match: '[\)\}\]]'
      scope: invalid.illegal.stray-bracket-end.sp
    - match: ';'
      scope: punctuation.terminator.sp

  late-expressions:
    - match: \b(?:static|const)\b
      scope: storage.modifier.sp
    - include: function-call
    - include: variable-decl
    # - include: variable-usage-late


# ---------------------------------------------------------------------------

#### Preprocessor
  preprocessor:
    - include: preprocessor-macro-define
    - include: preprocessor-pragma
    - include: preprocessor-other

  preprocessor-macro-define:
    - match: '^\s*(?:#(\s*)(define))\b\s*?'
      captures:
        1: invalid.illegal.unexpected-space.sp
        2: keyword.control.import.define.spf
      push:
        - meta_scope: meta.preprocessor.define.sp
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        - match: '{{end_of_line}}'
          pop: true

        - match: '(([^[:alpha:]_\(\s])?\S+?)(?=\()'
          captures:
            1: entity.name.function.sp
            2: invalid.illegal.invalid-character.sp
          set:
            - match: '\('
              scope: punctuation.section.group.begin.sp
              set: preprocessor-macro-params
            - match: '{{end_of_line}}'
              pop: true

        - match: '(([^[:alpha:]_\(\s])?\S+)(?=\s)'
          captures:
            1: entity.name.constant.sp
            2: invalid.illegal.invalid-character.sp
          set:
            - include: preprocessor-line-continuation
            - include: preprocessor-comments
            - include: expressions
            - match: '{{end_of_line}}'
              pop: true

  preprocessor-macro-params:
    - meta_scope: meta.preprocessor.macro.parameters.sp meta.group.sp
    - include: preprocessor-comments
    - include: preprocessor-line-continuation
    - match: '%\d+'
      scope: variable.parameter.sp
    - match: \)
      scope: punctuation.section.group.end.sp
      set: preprocessor-macro-definition
    - match: ','
      scope: punctuation.separator.sp
      push:
      - include: preprocessor-comments
      - include: preprocessor-line-continuation
      - match: '%\d+'
        scope: variable.parameter.sp
        pop: true
      - match: '(?=\))'
        pop: true
      - match: '\S+'
        scope: invalid.illegal.unexpected-character.sp

  preprocessor-macro-definition:
    - meta_content_scope: meta.preprocessor.macro.sp
    - include: preprocessor-line-continuation
    - include: preprocessor-comments
    - match: '{{end_of_line}}'
      pop: true
    - include: preprocessor-expressions


  preprocessor-expressions:
    - match: '{{end_of_line}}'
      pop: true

    - match: '%\d+'
      scope: variable.other.readwrite.sp
    - match: \(
      scope: punctuation.section.group.begin.sp
      push:
        - meta_scope: meta.group.sp
        - match: \)
          scope: punctuation.section.group.end.sp
          pop: true

        - include: preprocessor-expressions
    - match: \{
      scope: punctuation.section.braces.begin.sp
      push:
        - meta_scope: meta.block.sp
        - match: \}
          scope: punctuation.section.braces.end.sp
          pop: true

        - include: preprocessor-expressions
    - match: \[
      scope: punctuation.section.brackets.begin.sp
      push:
        - meta_scope: meta.brackets.sp
        - match: \]
          scope: punctuation.section.brackets.end.sp
          pop: true

        - include: preprocessor-expressions
    - include: expressions

  preprocessor-line-continuation:
    - match: '(?<!\\)(?:\\\\)*\K(\\)$(?=\n)'
      scope: punctuation.separator.continuation.sp
    - match: '(?<!\\)(?:\\\\)*\K(\\)([ \t]+?)$'
      captures:
        1: punctuation.separator.continuation.sp
        2: invalid.illegal.space-after-continuation.sp

  preprocessor-comments:
    - match: (?<!\\)(\\\\)*\K\/\*
      scope: punctuation.definition.comment.begin.sp
      push:
        - meta_scope: comment.block.sp
        - match: \*\/
          scope: punctuation.definition.comment.end.sp
          pop: true
    - match: \/\/
      scope: punctuation.definition.comment.sp
      push:
        - meta_scope: comment.line.double-slash.sp
        - match: (?:\\\\)*\K(\\)$(?=\n)
          scope: punctuation.separator.continuation.sp
        - match: '{{end_of_line}}'
          pop: true

  preprocessor-pragma:
    - match: '^[ \t]*(#)(\s*)(pragma)\b'
      captures:
        1: meta.preprocessor.sp
        2: invalid.illegal.unexpected-space.sp
        3: keyword.control.import.pragma.sp
      push:
        - meta_scope: meta.preprocessor.import.pragma.sp
        - include: preprocessor-line-continuation
        - include: preprocessor-comments

        - match: '{{end_of_line}}'
          pop: true

        - match: '\b(dynamic|semicolon|tabsize)([ \t]+\d*)?'
          captures:
            1: keyword.control.import.sp
            2: constant.numeric.integer.sp
          set: preprocessor_eol

        - match: \b(ctrlchar)([ \t]+(\')(?:([^\\'])|({{const_char_escape}}))?('))?
          captures:
            1: keyword.control.import.sp
            2: constant.character.escape.sp
            3: punctuation.definition.string.begin.sp
            4: constant.character.sp
            5: constant.character.escape.sp
            6: punctuation.definition.string.end.sp
          set: preprocessor_eol

        - match: '\b(unused)([ \t]+{{identifier}})?'
          captures:
            1: keyword.control.import.sp
            2: variable.other.sp
          set: preprocessor_eol

        - match: '\brational\b'
          scope: keyword.control.import.sp
          set: preprocessor_eol

        - match: '\b(newdecls(?:[ \t]+(?:required|optional)\b(?:$|[^\S]))?)'
          scope: keyword.control.import.sp
          set: preprocessor_eol

        - match: '\bdeprecated\b'
          scope: keyword.control.import.sp invalid.deprecated.sp
          set:
          - meta_content_scope: meta.preprocessor.pragma.deprecated.sp
          - match: '{{end_of_line}}'
            pop: true

        - match: \S
          push:
          - clear_scopes: true
          - match: '{{end_of_line}}'
            pop: true

  preprocessor_eol:
    - match: '{{end_of_line}}'
      pop: true
    - include: preprocessor-line-continuation
    - include: preprocessor-comments

  preprocessor-other:
    - match: '^[ \t]*(#(\s*)((?:else)?if))\b'
      captures:
        1: meta.preprocessor.sp
        2: invalid.illegal.unexpected-space.sp
        3: keyword.control.import.if.sp
      push:
        - meta_scope: meta.preprocessor.conditional.sp
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        - match: \bdefined\b
          scope: keyword.operator.word.sp
          push:
            - match: '({{identifier}})|(\()[ \t]*({{identifier}})[ \t]*(\))'
              captures:
                1: variable.other.constant.sp
                2: punctuation.section.group.begin.sp
                3: variable.other.constant.sp
                4: punctuation.section.group.end.sp
              scope: variable.other.constant.sp
              pop: true
            - match: '{{end_of_line}}'
              pop: 2
        - include: constants
        - include: operators
        - match: '{{end_of_line}}'
          pop: true

    - match: '^[ \t]*(#(\s*)(undef))\b'
      captures:
        1: meta.preprocessor.sp
        2: invalid.illegal.unexpected-space.sp
        3: keyword.control.import.undef.sp
      push:
        - meta_scope: meta.preprocessor.sp
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        - match: '{{identifier}}'
          scope: variable.other.constant.sp
          push:
            - include: preprocessor-line-continuation
            - include: preprocessor-comments
            - match: \S+
              scope: invalid.illegal.unexpected-character.sp
            - match: '{{end_of_line}}'
              pop: true
        - match: '{{end_of_line}}'
          pop: true

    - match: '^[ \t]*(?:#(\s*)(endif|endinput|else))\b'
      captures:
        1: invalid.illegal.unexpected-space.sp
        2: keyword.control.import.if.sp
      push:
        - meta_scope: meta.preprocessor.conditional.sp
        - include: preprocessor-line-continuation
        - include: comments
        - match: (\S+?)(?=$|\/\*|\/\/|\b|\s)
          captures:
            1: invalid.illegal.unexpected-character.sp
        - match: '{{end_of_line}}'
          pop: true

    - match: '^[ \t]*(#(\s*)(error))\b'
      captures:
        1: meta.preprocessor.sp
        2: invalid.illegal.unexpected-space.sp
        3: keyword.control.import.error.sp
      push:
        - meta_scope: meta.preprocessor.diagnostic.sp
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        - include: strings
        - match: '{{end_of_line}}'
          pop: true

    - match: '^[ \t]*(#(\s*)((?:try)?include))\b'
      captures:
        1: meta.preprocessor.sp
        2: invalid.illegal.unexpected-space.sp
        3: keyword.control.import.include.sp
      push:
        - meta_scope: meta.preprocessor.sp
        - match: '{{end_of_line}}'
          pop: true
        - include: preprocessor-line-continuation
        - include: preprocessor-comments

        - match: (?<!\\)(\\\\)*\K\"
          scope: punctuation.definition.string.begin.sp
          set:
            - meta_scope: string.quoted.double.include.sp
            - match: (?:({{const_char_escape}})|(\\.))
              captures:
                1: constant.character.escape.sp
                2: invalid.illegal.unexpected-character.sp
            - match: (?<!\\)(\\\\)*\K\"
              scope: punctuation.definition.string.end.sp
              set: preprocessor_eol

        - match: '<'
          scope: punctuation.definition.string.begin.sp
          set:
            - meta_scope: string.quoted.other.lt-gt.include.sp
            - match: '>'
              scope: punctuation.definition.string.end.sp
              set: preprocessor_eol
            - match: '{{end_of_line}}'
              pop: true

        - match: (?=\S)
          set: preprocessor_eol

    - match: '^[ \t]*(#)'
      captures:
        1: meta.preprocessor.sp
      push:
        - match: '{{end_of_line}}'
          pop: true
        - include: preprocessor-line-continuation
        - include: preprocessor-comments

# ---------------------------------------------------------------------------

### struct - No one should be making these, so this is gonna be lazy
  struct:
    - match: '(?<=^|[;\)\}]|\*\/)\s*(struct)(?:[ \t]+(\w+)\b)?'
      scope: storage.type.struct.sp
      captures:
        1: keyword.declaration.struct.sp
        2: entity.name.struct.sp
      push:
        - match: \{
          scope: punctuation.section.braces.begin.sp
          set:
            - match: \}
              scope:  punctuation.section.braces.end.sp
              pop: true
            - include: comments
            - match: (public)(?:[ \t]+(const))?[ \t]+(\w+)(?:(\[)(\]))?[ \t]+(\w+)\b
              captures:
                1: storage.modifier.sp
                2: storage.modifier.sp
                3: storage.type.sp
                4: punctuation.section.brackets.begin.sp
                5: punctuation.section.brackets.end.sp
                6: variable.other.member.sp
            - match: ;
              scope: punctuation.terminator.sp

# ---------------------------------------------------------------------------

### enum
  enum:
    - match: '(?<=^|[;\)\}]|\*\/)\s*enum\b'
      scope: storage.type.enum.sp keyword.declaration.enum.sp
      branch_point: enum_begin
      branch:
        - enum_definition
        - enum_end

  enum_end:
    - match: ''
      pop: true

  enum_definition:
    - include: comments

    - match: (?=\{)
      set: enum_contents

    - match: \bstruct\b
      scope: storage.type.struct keyword.declaration.struct.sp
      branch_point: enum_struct_begin
      branch:
      - enum_struct_type
      - enum_end

    - match: \(
      scope: punctuation.section.group.begin.sp
      push:
        - match: \)
          scope: punctuation.section.group.end.sp
          set:
            - match: (?=\{)
              set: enum_contents
            - match: (?=\S)
              fail: enum_begin
        - include: enum_increment

    - match: (?:({{identifier}})\s*(:)\s*)?({{identifier}})(?:\s*(:))?
      captures:
        1: storage.type.sp
        2: punctuation.separator.sp
        3: entity.name.enum.sp
        4: punctuation.separator.sp
      push:
        - include: comments
        - match: \(
          scope: punctuation.section.group.begin.sp
          push:
            - match: \)
              scope: punctuation.section.group.end.sp
              pop: true
            - include: enum_increment

        - match: (?=\{)
          set: enum_contents
        - match: (?=\S)
          fail: enum_begin

  enum_struct_type:
    - include: comments
    - match: '{{identifier}}'
      scope: entity.name.struct.enum.sp
      set:
        - match: \{
          scope: punctuation.section.braces.begin.sp
          set: enum_struct_contents
        - match: (?=\S)
          fail: enum_struct_begin

  enum_increment:
    - meta_content_scope: meta.group.enumincrement.sp

    - match: '(?:[\+\-\*\/]|\<\<|\>\>)\s*='
      scope: keyword.operator.assignment.augmented.sp
      push:
        - match: (?=\))
          pop: true
        - match: \d+
          scope: constant.numeric.integer.sp
          set:
            - match: (?=\))
              pop: true
            - match: '[^\s\)]+'
              scope: invalid.illegal.unexpected-character.sp
        - match: '[^\s\)]+'
          scope: invalid.illegal.unexpected-character.sp

    - match: '([\+\-\*\/]|<<?|>>?)'
      scope: keyword.operator.arithmetic.sp
      push:
        - match: (?=\)|=)
          pop: true
        - match: '[^\s\)]+'
          scope: invalid.illegal.unexpected-character.sp

    - match: '[^\s\)]+'
      scope: invalid.illegal.unexpected-character.sp

  enum_contents:
    - match: \{
      scope: punctuation.section.braces.begin.sp
      branch_point: enum_contents_begin
      branch:
        - enum_normal_contents
        - enum_oldstruct_contents

  enum_normal_contents:
    - meta_scope: meta.enum.sp meta.block.sp
    - match: '\}'
      scope: punctuation.section.braces.end.sp
      pop: 3

    - match: '{{identifier}}\s*:'
      fail: enum_contents_begin

    - match: ','
      scope: punctuation.separator.sp

    - match: '{{identifier}}'
      scope: entity.name.constant.enum.sp
      push:
        - include: comments

        - match: (?=,|\})
          pop: true

        - match: '='
          scope: keyword.operator.assignment.sp
          push:
            - match: (?=,|\})
              pop: 2

            - include: expressions

        - match: (?=\[)
          fail: enum_contents_begin

        - match: \s+(?=[[:alpha:]_])
          scope: invalid.illegal.missing-comma.sp
          pop: true

        - match: '[^\s,\}]+'
          scope: invalid.illegal.syntax.sp

    - include: comments
    - include: preprocessor

    - match: '[^\s,\}]+'
      scope: invalid.illegal.syntax.sp

  enum_oldstruct_contents:
    - meta_scope: meta.enumstruct.legacy.sp meta.block.sp
    - match: '\}'
      scope: punctuation.section.braces.end.sp
      pop: 3

    - match: ','
      scope: punctuation.separator.sp

    - match: '({{identifier}})\s*(:)'
      captures:
        1: storage.type.sp
        2: punctuation.separator.sp
      push: enum_oldstruct_variables

    - include: comments
    - include: preprocessor

    - match: (?=[[:alpha:]_])
      push: enum_oldstruct_variables

    - match: '[^\s\}]+'
      scope: invalid.illegal.syntax.sp

  enum_oldstruct_variables:
    - match: '(?=,|\})'
      pop: true

    - match: '{{identifier}}'
      scope: variable.other.member.sp
      set:
        - include: comments
        - match: ','
          scope: punctuation.separator.sp
          pop: true
        - match: (?=\})
          pop: true
        - include: brackets

        - match: \s+(?=[[:alpha:]_])
          scope: invalid.illegal.missing-comma.sp
          pop: true

        - match: \S+
          scope: invalid.illegal.syntax.sp

    - match: (?=\S)
      pop: true

  enum_struct_contents:
    - meta_scope: meta.enumstruct.sp meta.block.sp
    - match: '\}'
      scope: punctuation.section.braces.end.sp
      pop: 2

    - match: ';'
      scope: punctuation.terminator.sp

    - match: '^\s*((?:(?:public|static|const)\s+)*)(?={{identifier}})'
      captures:
        1: invalid.illegal.syntax.sp
      branch_point: enum_struct_variable_begin
      branch:
        - enum_struct_variable
        - enum_struct_function
        - enum_struct_variable_end

    - match: '^\s*(const|static|public)\b'
      captures:
        1: invalid.illegal.syntax.sp

    - include: comments
    - include: preprocessor

  enum_struct_variable:
    - meta_scope: meta.variable.sp
    - match: '{{identifier}}'
      scope: storage.type.sp
      push:
        - include: comments
        - match: '\['
          push:
            - meta_scope: invalid.illegal.syntax.sp
            - match: \]
              pop: true
            - include: comments
            - match: (?=\})
              pop: 3
        - match: (?=\})
          pop: 2
        - match: '(?=^\s*{{identifier}}\s+[[:alpha:]_\s])|[^[:alpha:]_\s]'
          pop: 2
        - match: '{{identifier}}'
          scope: variable.other.member.sp
          set:
            - match: (?=\})
              pop: 2
            - match: (?=\()
              fail: enum_struct_variable_begin
            - include: brackets
            - match: ';'
              scope: punctuation.terminator.sp
              pop: 2
            - include: comments
            - match: '[^[:alpha:]_\s;]+'
              scope: invalid.illegal.unexpected-character.sp
            - match: '(?=\s*[[:alpha:]_]|\})'
              pop: 2

  enum_struct_function:
    - match: '{{identifier}}'
      scope: meta.function.return-type.sp storage.type.sp
      push:
        - match: '{{identifier}}'
          scope: meta.function.sp entity.name.function.sp
          set:
            - match: \(
              scope: punctuation.section.group.begin.sp
              set:
                - meta_scope: meta.function.parameters.sp
                - match: \)
                  scope: punctuation.section.group.end.sp
                  set:
                    - match: (?=\{)
                      set: enum-function-definition-body
                    - include: comments
                    - match: '(?=\s*[[:alpha:]_]|\})'
                      pop: 2
                - include: function-params
            - include: comments
            - match: (?=\S)
              fail: enum_struct_variable_begin

  enum-function-definition-body:
    - meta_content_scope: meta.function.sp
    - match: '\{'
      scope: meta.block.sp punctuation.section.block.begin.sp
      set:
        - meta_content_scope: meta.function.sp meta.block.sp
        - match: '\}'
          scope: meta.function.sp meta.block.sp punctuation.section.block.end.sp
          pop: 2

        - include: expressions

  enum_struct_variable_end:
    - match: '.*?'
      scope: invalid.illegal.syntax.sp
      pop: true

# ---------------------------------------------------------------------------

### methodmap
  methodmap:
    - match: '(?<=^|[;\)\}]|\*\/)\s*methodmap\b'
      scope: storage.modifier.sp
      branch_point: methodmap_begin
      branch:
        - - match: '{{identifier}}'
            scope: entity.name.class.sp
            push:
              - meta_scope: meta.class.methodmap.sp
              - match: '<'
                scope: punctuation.separator.sp
                push:
                  - match: '{{identifier}}'
                    scope: entity.other.inherited-class.sp
                    set:
                      - match: (?=\{)
                        pop: true
                      - include: comments
                      - match: (?=\S)
                        fail: methodmap_begin
                  - include: comments
                  - match: (?=\S)
                    pop: true
              - match: '\{'
                scope: meta.block.sp punctuation.section.block.begin.sp
                set:
                  - meta_content_scope: meta.class.methodmap.sp meta.block.sp
                  - match: '\}'
                    scope: meta.class.methodmap.sp meta.block.sp punctuation.section.block.end.sp
                    pop: 2
                  - include: methodmap-body
              - match: '__nullable__'
                scope: constant.language.sp
              - include: comments
              - match: (?=\S)
                fail: methodmap_begin

        - - match: (?=\S)
            pop: true

  methodmap-body:
    - include: comments
    - include: methodmap-function-definition-body

    - match: '(?<=^|[;\)\}]|\*\/)\s*public\b'
      scope: storage.modifier.sp
      branch_point: methodmap_func_begin
      branch:
        - - match: '(?=\s*\b(public|property)\b|\}|[^[:alpha:]_\s])'
            pop: true

          - match: '\b(?:native|static)\b'
            scope: storage.modifier.sp
          - match: '\b(?:const)\b'
            scope: invalid.illegal.sp

          - match: '{{identifier}}'
            scope: meta.function.return-type.sp storage.type.sp
            push:
              - match: (?=\() # constructor
                fail: methodmap_func_begin

              - match: (?={{identifier}})
                branch_point: methodmap_func_name_begin
                branch:
                  - - match: '{{identifier}}'
                      scope: meta.function.sp entity.name.function.sp
                      push:
                        - match: \(
                          scope: punctuation.section.group.begin.sp
                          set:
                            - meta_scope: meta.function.parameters.sp
                            - match: \)
                              scope: punctuation.section.group.end.sp
                              pop: 4
                            - include: function-params
                        - include: comments
                        - match: \S
                          fail: methodmap_func_name_begin
                    - include: comments

                  - - match: ''
                      pop: 3
              - include: comments
              - match: '(?=\b(public|property)\b|\}|[^[:alpha:]_\s])'
                pop: true
          - include: comments

        - - meta_scope: meta.function.sp
          - match: '\b(?:native|static)\b'
            scope: storage.modifier.sp
          - match: '{{identifier}}'
            scope: entity.name.function.constructor.sp
            push:
              - match: \(
                scope: punctuation.section.group.begin.sp
                set:
                  - meta_scope: meta.function.parameters.sp
                  - match: \)
                    scope: punctuation.section.group.end.sp
                    pop: 2
                  - include: function-params
              - include: comments
              - match: (?=\S)
                fail: methodmap_func_begin
          - include: comments

        - - match: (?=\S)
            pop: true

    - match: '(?<=^|[;\)\}])\s*\bproperty\b'
      scope: storage.modifier.sp
      branch_point: property_begin
      branch:
        - - match: '(?=\s*\b(public|property)\b|\}|[^[:alpha:]_\s])'
            pop: true
          - match: '{{identifier}}'
            scope: storage.type.sp
            push:
              - match: '(?=\s*\b(public|property)\b|\}|[^[:alpha:]_\s])'
                pop: 2
              - match: '{{identifier}}'
                scope: entity.name.trait.sp
                set:
                - match: \{
                  scope: punctuation.section.braces.begin.sp
                  set:
                    - meta_scope: meta.block.sp
                    - match: \}
                      scope: punctuation.section.braces.end.sp
                      pop: 2
                    - match: (?<=^|;|\)|\})\s*\bpublic\b
                      scope: storage.modifier.sp
                      push:
                        - match: \bnative\b
                          scope: storage.modifier.sp
                        - match: '\bget\b'
                          scope: support.function.sp
                          set:
                          - match: \(
                            scope: punctuation.section.group.begin.sp
                            set:
                              - meta_scope: meta.group.sp
                              - match: \)
                                scope: punctuation.section.group.end.sp
                                pop: true
                              - match: \S
                                scope: invalid.illegal.sp
                          - include: comments
                          - match: (?=\S)
                            pop: true
                        - match: '\bset\b'
                          scope: support.function.sp
                          set:
                          - match: \(
                            scope: punctuation.section.group.begin.sp
                            set:
                              - meta_scope: meta.group.sp
                              - match: \)
                                scope: punctuation.section.group.end.sp
                                pop: true
                              - include: function-params
                          - include: comments
                          - match: (?=\S)
                            pop: true
                        - include: comments
                    - match: ';'
                      scope: punctuation.terminator.sp
                    - include: methodmap-function-definition-body
                    - include: comments
                - include: comments
        - - match: ''
            pop: true

    - include: preprocessor

  methodmap-function-definition-body:
    - meta_content_scope: meta.function.sp
    - match: '\{'
      scope: meta.block.sp punctuation.section.block.begin.sp
      push:
        - meta_content_scope: meta.function.sp meta.block.sp
        - match: '\}'
          scope: meta.function.sp meta.block.sp punctuation.section.block.end.sp
          pop: true

        - include: expressions

  function-definition-body:
    - meta_content_scope: meta.function.sp
    - match: \{
      scope: meta.block.sp punctuation.section.block.begin.sp
      set:
        - meta_content_scope: meta.function.sp meta.block.sp
        - match: \}
          scope: meta.function.sp meta.block.sp punctuation.section.block.end.sp
          pop: true

        - include: expressions

# ---------------------------------------------------------------------------

  public-var:
    - match: (public)[ \t]+(const)[ \t]+(\w+)(?:[ \t]+|:)(\w+)\b(?![ \t]*(?:=|\())
      captures:
        1: storage.modifier.sp
        2: storage.modifier.sp
        3: storage.type.sp
        4: entity.name.constant.sp

# ---------------------------------------------------------------------------

### public callbacks
  public:
    - match: (?<=^|[;\)\}]|\*\/)\s*public\b
      scope: storage.modifier.sp
      branch_point: public_begin
      branch:
        # public function, no type
        - - match: '{{identifier}}'
            scope: meta.function.sp support.function.sp
            push:
              - meta_content_scope: meta.function.parameters.sp
              - match: \(
                scope: punctuation.section.group.begin.sp
                set:
                  - meta_content_scope: meta.function.parameters.sp
                  - match: \)
                    scope: punctuation.section.group.end.sp
                    set:
                      - meta_content_scope: meta.function.sp
                      - match: \s*\{
                        scope: meta.block.sp punctuation.section.block.begin.sp
                        set:
                          - meta_content_scope: meta.function.sp meta.block.sp
                          - match: \}
                            scope: meta.function.sp meta.block.sp punctuation.section.block.end.sp
                            pop: 2
                          - include: expressions

                      - include: comments
                      - match: (?=\s*\S)
                        pop: 2

                  - include: function-params
              - match: \S
                fail: public_begin

        # public typed function
        - - match: ({{identifier}})(?:\s*(:))?
            captures:
              0: meta.function.return-type.sp
              1: storage.type.sp
              2: punctuation.separator.sp
            push:
              - meta_content_scope: meta.function.sp
              - match: '{{identifier}}'
                scope: support.function.sp
                set:
                  - meta_content_scope: meta.function.parameters.sp
                  - match: \(
                    scope: punctuation.section.group.begin.sp
                    set:
                      - meta_content_scope: meta.function.parameters.sp
                      - match: \)
                        scope: punctuation.section.group.end.sp
                        set:
                          - meta_content_scope: meta.function.sp
                          - match: \s*\{
                            scope: meta.block.sp punctuation.section.block.begin.sp
                            set:
                              - meta_content_scope: meta.function.sp meta.block.sp
                              - match: \}
                                scope: meta.function.sp meta.block.sp punctuation.section.block.end.sp
                                pop: 2
                              - include: expressions

                          - include: comments
                          - match: (?=\s*\S)
                            pop: 2
                      - include: function-params

                  - include: comments
                  - match: \S
                    fail: public_begin

              - include: comments
              - match: \S
                fail: public_begin

          - include: comments
          - match: \S
            fail: public_begin

         # struct
        - - match: ({{identifier}})(?:\s*(:))?
            captures:
              1: storage.type.sp
              2: punctuation.separator.sp
            push:
              - match: '{{identifier}}'
                scope: variable.other.sp
                set:
                  - match: '='
                    scope: keyword.operator.assignment.sp
                    set:
                      - match: \{
                        scope: punctuation.section.block.begin.sp
                        set:
                          - meta_scope: meta.block.struct.sp
                          - match: \}
                            scope: punctuation.section.block.end.sp
                            pop: 2

                          - match: ({{identifier}})
                            captures:
                              1: variable.other.member.sp
                            push:
                              - match: '='
                                scope: keyword.operator.assignment.sp
                                set:
                                  - match: (?=[,\}])
                                    pop: true

                                  - match: '(?=#)'
                                    pop: true

                                  - include: expressions

                                  - match: \s*(?={{identifier}}\s*=)
                                    scope: invalid.illegal.missing-comma.sp
                                    pop: true

                                  # - include: preprocessor

                              - match: \s*(?={{identifier}}\s*=)
                                scope: invalid.illegal.missing-comma.sp
                                pop: true

                          - match: ','
                            scope: punctuation.separator.sp

                          - include: preprocessor
                          - include: comments

                      - include: comments
                      - match: (?=\S)
                        pop: 2

                  - match: '\S'
                    fail: public_begin

              - match: '\S' # try to match public func with no type (old syntax)
                fail: public_begin

          - include: comments

          - match: \S
            fail: public_begin

        - - match: ''
            pop: true

# ---------------------------------------------------------------------------

### typedef
  functag:
    - match: (?<=^|[;\)\}]|\*\/)\s*functag\b
      scope: keyword.declaration.sp
      push:
        - match: \bpublic\b
          scope: storage.modifier.sp
          set:
            - match: '{{identifier}}(?=\s*\()'
              scope: entity.name.type.sp
              set:
                - match: \(
                  scope: meta.function.parameters.sp punctuation.section.group.begin.sp
                  set:
                    - match: \)
                      scope: punctuation.section.group.end.sp
                      pop: true

                    - include: function-params
            - match: (?=\S)
              pop: true
        - match: (?=\S)
          pop: true

  funcenum:
    - match: (?<=^|[;\)\}]|\*\/)\s*funcenum\b
      scope: keyword.declaration.sp
      push:
        - match: '{{invalid_var_lookahead}}'
          pop: true
        - match: '{{identifier}}'
          scope: entity.name.type.sp
          set:
            - include: comments
            - match: \{
              scope: punctuation.section.block.begin.sp
              set:
                - meta_scope: meta.block.funcenum.sp
                - match: \}
                  scope: punctuation.section.block.end.sp
                  pop: true

                - include: comments

                - match: ','
                  scope: punctuation.separator.sp
                - match: (?:({{identifier}})\s*(:)\s*)?(public)\b(?=\()
                  captures:
                    1: storage.type.sp
                    2: punctuation.separator.sp
                    3: storage.modifier.sp
                  push:
                    - match: \(
                      scope: meta.function.parameters.sp punctuation.section.group.begin.sp
                      set:
                        - match: \)
                          scope: punctuation.section.group.end.sp
                          pop: true

                        - include: function-params
            - match: (?=\S)
              pop: true

  typedef:
    - match: (?<=^|[;\)\}]|\*\/)\s*typedef\b
      scope: keyword.declaration.sp
      branch_point: typedef_begin
      branch:
        - - include: comments
          - match: '{{identifier}}'
            scope: entity.name.type.sp
            push:
              - include: comments

              - match: '='
                scope: keyword.operator.assignment.sp
                set: typedef_function

              - match: (?=\S)
                fail: typedef_begin
        - - match: ''
            pop: true

  typedef_function:
    - include: comments

    - match: '\bfunction\b'
      scope: storage.modifier.sp
      branch_point: typedef_function_begin
      branch:
        - - include: comments

          - match: '{{identifier}}'
            scope: storage.type.sp
            push:
              - include: comments

              - match: \(
                scope: meta.function.parameters.sp punctuation.section.group.begin.sp
                set:
                  - match: \)
                    scope: punctuation.section.group.end.sp
                    pop: 2

                  - include: function-params

              - match: (?=\S)
                fail: typedef_function_begin
        - - match: ''
            pop: true

    - match: (?=\S)
      pop: 2

  typeset:
    - match: (?<=^|[;\)\}]|\*\/)\s*typeset\b
      scope: keyword.declaration.sp
      branch_point: typeset_begin
      branch:
        - - include: comments

          - match: '{{identifier}}'
            scope: entity.name.type.sp
            push:
              - include: comments
              - match: \{
                scope: punctuation.section.block.begin.sp
                set:
                  - meta_scope: meta.block.typeset.sp
                  - match: \}
                    scope: punctuation.section.block.end.sp
                    pop: 2

                  - include: comments
                  - include: typeset_function

              - match: (?=\S)
                fail: typeset_begin
        - - match: ''
            pop: true

  typeset_function:
    - include: comments

    - match: '(?<=^|[;\)\}]|\*\/)\s*function\b'
      scope: storage.modifier.sp
      branch_point: typeset_function_begin
      branch:
        - - include: comments
          - match: (?=\})|[^[:alpha:]_\s]+
            pop: true
          - match: '\bfunction\b'
            fail: typeset_function_begin
          - match: '{{identifier}}'
            scope: storage.type.sp
            push:
              - match: \(
                scope: meta.function.parameters.sp punctuation.section.group.begin.sp
                set:
                  - match: \)
                    scope: punctuation.section.group.end.sp
                    pop: 2
                  - include: function-params
              - include: comments
              - match: (?=\S)
                pop: 2
        - - match: ''
            pop: true

    - match: ';'
      scope: punctuation.terminator.sp

  typeset_function_type:
    - include: comments
    - match: (?=\})|[^[:alpha:]_\s]+
      pop: true
    - match: '\bfunction\b'
      fail: typeset_function_begin
    - match: '{{identifier}}'
      scope: storage.type.sp
      push:
        - include: comments

        - match: \(
          scope: meta.function.parameters.sp punctuation.section.group.begin.sp
          set:
            - match: \)
              scope: punctuation.section.group.end.sp
              pop: 2

            - include: function-params

        - match: (?=\S)
          pop: 2

# ---------------------------------------------------------------------------

### natives and forwards
  native-forward:
    - match: '(?<=^|[;\)\}]|\*\/)\s*(?:native|forward)'
      scope: storage.type.function keyword.declaration.function
      branch_point: native-forward-begin
      branch:
        # Typed eg - native int f(...) or forward bool:f(...)
        - - match: '({{identifier}})(?:\s*(:))?'
            captures:
              1: meta.function.return-type.sp storage.type.sp
              2: punctuation.separator.sp
            push:
              - match: '{{operator}}|{{identifier}}'
                scope: meta.function.sp entity.name.function.sp
                set:
                  - match: \(
                    scope: meta.function.parameters.sp punctuation.section.group.begin.sp
                    set:
                      - match: \)
                        scope: punctuation.section.group.end.sp
                        set:
                        - match: '[ \t]*(=)[ \t]*(\w+)\b'
                          captures:
                            1: keyword.operator.assignment.sp
                            2: variable.function.sp
                          pop: 2

                        - match: (?=\S)
                          pop: 2

                        # pop: 2
                      - include: function-params
                  - include: comments
                  - match: \S
                    fail: native-forward-begin
              - include: comments
              - match: \S
                fail: native-forward-begin
          - include: comments

        - - match: '{{operator}}|{{identifier}}'
            scope: entity.name.function.sp
            push:
              - match: \(
                scope: meta.function.parameters.sp punctuation.section.group.begin.sp
                set:
                  - match: \)
                    scope: punctuation.section.group.end.sp
                    set:
                    - match: '[ \t]*(=)[ \t]*(\w+)\b'
                      captures:
                        1: keyword.operator.assignment.sp
                        2: variable.function.sp
                      pop: 2

                    - match: (?=\S)
                      pop: 2
                    # pop: 2
                  - include: function-params
              - include: comments
              - match: \S
                fail: native-forward-begin
          - include: comments

          - match: \S
            fail: native-forward-begin

        - - match: ''
            pop: true

  function-params:
    - match: (?=\S)
      branch_point: function_param_begin
      branch:
      - function_param_old
      - function_param_new

  function_param_old:
    - match: (?=\))
      pop: true
    - match: ','
      scope: punctuation.separator.sp
      pop: true
    - match: '&(\s*&)*'
      scope: keyword.operator.reference.sp
      captures:
        1: invalid.illegal.sp
    - match: \bconst\b\s*
      scope: storage.modifier.sp
    - match: ({{identifier}})\s*(:)
      captures:
        1: storage.type.sp
        2: punctuation.separator.sp
      push:
        - match: (?=,|\))
          pop: true
        - match: '{{identifier}}'
          scope: variable.parameter.sp
          set:
            - match: (?=,|\))
              pop: true
            - include: brackets
            - match: '='
              scope: keyword.operator.assignment.sp
              set:
                - match: '(?=,|\))'
                  pop: true
                - include: expressions

                - match: '{{identifier}}'
                  scope: variable.other.constant.sp

            - include: comments
            - match: (?=\S)
              set:
                - match: (?=,|\))
                  pop: true
        - match: '\.\.\.'
          scope: keyword.operator.variadic.sp
          set:
            - match: (?=\))
              pop: true
            - match: ','
              scope: punctuation.separator.sp invalid.illegal.variadic-must-be-end.sp
              set:
                - match: (?=\))
                  pop: true
                - include: comments
            - include: comments
        - match: '\.{1,2}'
        - include: comments

    - match: '{{identifier}}'
      scope: variable.parameter.sp
      push:
        - match: (?=,|\))
          pop: true
        - include: brackets
        - match: '='
          scope: keyword.operator.assignment.sp
          set:
            - match: '(?=,|\))'
              pop: true
            - include: expressions
            - match: '{{identifier}}'
              scope: variable.other.constant.sp

        - include: comments
        - match: '(?=[[:alpha:]_\.])'
          fail: function_param_begin
    - include: comments

    - match: \S+
      scope: invalid.illegal.sp

  function_param_new:
    - match: (?=\))
      pop: true

    - match: ','
      scope: punctuation.separator.sp
      pop: true
    - match: '\bconst\b'
      scope: storage.modifier.sp
    - match: '{{identifier}}'
      scope: storage.type.sp
      push:
        - match: (?=,|\))
          pop: true
        - match: '\.\.\.'
          scope: keyword.operator.variadic.sp
          set:
            - match: (?=\))
              pop: true
            - match: ','
              scope: punctuation.separator.sp invalid.illegal.variadic-must-be-end.sp
              set:
                - match: (?=\))
                  pop: true
                - include: comments
            - include: comments
        - match: '\.{1,2}'
        - match: '\['
          scope: punctuation.section.brackets.begin.sp
          push:
            - meta_scope: meta.brackets.sp
            - match: \]
              scope: punctuation.section.brackets.end.sp
              pop: true
            - match: (?=,|\))
              pop: 2
            - include: comments
            - match: '[^\s\]]+'
              scope: invalid.illegal.sp
        - match: '&(\s*&)*'
          scope: keyword.operator.reference.sp
          captures:
            1: invalid.illegal.sp
        - match: '{{identifier}}'
          scope: variable.parameter.sp
          set:
            - match: (?=,|\))
              pop: true
            - include: brackets
            - match: '='
              scope: keyword.operator.assignment.sp
              set:
                - match: '(?=,|\))'
                  pop: true
                - include: expressions
                - match: '{{identifier}}'
                  scope: variable.other.constant.sp
            - include: comments
            - match: (?=\S)
              set:
                - match: (?=,|\))
                  pop: true
        - include: comments

        - match: '[^[;&,\)\s]]+'
          scope: invalid.illegal.sp

    - include: comments
    - match: '[^[;&,\)\s]]+'
      scope: invalid.illegal.sp

# ---------------------------------------------------------------------------

  accessor:
    - match: ({{identifier}})\s*(::)
      captures:
        1: storage.type
        2: punctuation.accessor.double-colon.sp
      push:
        - match: \s*{{identifier}}
          scope: variable.other.member.sp
          pop: true
        - match: (?=\s*\S)
          pop: true

    - match: \.\.(?!\.)
      scope: invalid.illegal.syntax.sp

    - match: \.
      scope: punctuation.accessor.dot.sp
      push:
        - match: (?=\s*{{identifier}}[ \t]{{identifier}})
          pop: true

        - match: '({{identifier}})\s*(?=\()'
          scope: variable.function.sp
          set:
            - match: \(
              scope: meta.group.sp punctuation.section.group.begin.sp
              set:
                - match: \)
                  scope: meta.group.sp punctuation.section.group.end.sp
                  pop: true
                - include: expressions

        - match: '{{identifier}}'
          scope: variable.other.member.sp
          pop: true

        - match: (?=\S)
          pop: true

    - match: \.(?!\.)
      scope: punctuation.accessor.sp

    - match: '{{identifier}}(?=\s*\.{3})'
      scope: variable.other.constant.sp

    # - match: \b(?:([A-Z][A-Z_\d]+)|([A-Z]\w+)|({{identifier}}))(?=\s*\.)
    #   captures:
    #     1: variable.other.constant.sp
    #     2: storage.type.sp
    #     3: variable.other.readwrite.sp

# ---------------------------------------------------------------------------

  function-call:
    - match: (?={{identifier}}\s*\()
      branch_point: function-call-begin
      branch:
        - - match: '(?={{local_lookahead}})'
            pop: true

          - meta_content_scope: meta.function-call.sp

          - match: '{{identifier}}'
            scope: variable.function.sp
            push:
              - match: (?=\()
                set:
                - match: \(
                  scope: meta.group.sp punctuation.section.group.begin.sp
                  set:
                    - match: \)
                      scope: meta.group.sp punctuation.section.group.end.sp
                      pop: 2
                    - include: early-expressions
                    - include: function-call

              - match: (?=\S)
                fail: function-call-begin

        - - match: ''
            pop: true

# ---------------------------------------------------------------------------

  brackets:
    - match: \[
      scope: punctuation.section.brackets.begin.sp
      push:
        - meta_scope: meta.brackets.sp
        - match: \]
          scope: punctuation.section.brackets.end.sp
          pop: true

        - include: expressions

  parens:
    - match: \(
      scope: punctuation.section.group.begin.sp
      push:
        - meta_scope: meta.group.sp
        - match: \)
          scope: punctuation.section.group.end.sp
          pop: true

        - include: expressions

  braces:
    - match: \{
      scope: punctuation.section.braces.begin.sp
      push:
        - meta_scope: meta.block.sp
        - match: \}
          scope: punctuation.section.braces.end.sp
          pop: true

        - include: expressions

# ---------------------------------------------------------------------------

  case-default:
    - match: '\bdefault\b'
      scope: keyword.control.sp
      push:
        - match: ':'
          scope: punctuation.separator.sp
          pop: true

        - include: comments

        - match: '^\s*(?=$|\})'
          pop: true

        - match: \s+(?=[^\s:])
          scope: invalid.illegal.missing-comma.sp
          pop: true

    - match: '\bcase\b'
      scope: keyword.control.sp
      push:
        - match: ':'
          scope: punctuation.separator.sp
          pop: true

        - include: constants
        - include: const_char

        - match: ','
          scope: punctuation.separator.sp

        - match: '{{identifier}}'
          scope: variable.other.constant

        - include: comments

  retag:
    - match: \bview_as\b
      scope: keyword.operator.word.viewas.sp
      push:
        - match: '<'
          scope: punctuation.section.generic.begin.sp
          set:
            - match: '>'
              scope: punctuation.section.generic.end.sp
              pop: true

            - match: '{{identifier}}'
              scope: storage.type.sp

        - include: comments

        - match: (?=\S)
          pop: true

    - match: '({{identifier}})(:)(?![ \t]*:)'
      captures:
        1: storage.type.sp
        2: punctuation.separator.sp

  # https://github.com/alliedmodders/sourcepawn/blob/d919ffc892fb2c908990bd2307e79893bde220a9/compiler/parser.cpp#L1005
  constants:
    - match: '\b(true|false|null|EOS|INVALID_FUNCTION|cellmax|cellmin)\b'
      captures:
        1: constant.language.sp
    - match: \b(__LINE__|__Pawn|debug)\b
      captures:
        1: support.constant.sp
    - match: '{{numerals}}'
      scope: constant.numeric.sp
    - match: '{{ALL_CONSTANTS}}'
      scope: support.constant.sp
    - match: '\b[A-Z_][A-Z_\d]+\b'
      scope: variable.other.constant.sp

  strings:
    - include: const_char

    - match: (?<!\\)(\\\\)*\K\"
      scope: punctuation.definition.string.begin.sp
      push:
        - meta_scope: string.quoted.double.sp
        - match: (?<!\\)(\\\\)*\K\"
          scope: punctuation.definition.string.end.sp
          pop: true
        - match: '{{str_format_char}}'
          scope: constant.other.placeholder.sp
        - match: (?:({{const_char_escape}})|(\\.))
          captures:
            1: constant.character.escape.sp
            2: invalid.illegal.unexpected-character.sp

  const_char:
    - match: (?<!\\)(?:\\\\)*\K(\')(?:([^\\'])|({{const_char_escape}}))?(')
      captures:
        1: punctuation.definition.string.begin.sp
        2: constant.character.sp
        3: constant.character.escape.sp
        4: punctuation.definition.string.end.sp

    - match: (?<!\\)(?:\\{2})*\K(\')([^']+|')?
      captures:
        1: punctuation.definition.string.begin.sp
        2: invalid.illegal.unexpected-character.sp
      push:
        - meta_scope: string.quoted.single.sp
        - match: (?<!\\)(?:\\{2})*\K\'
          scope: punctuation.definition.string.end.sp
          pop: true

  unique-keywords:
    - match: \bdefined\b
      scope: keyword.operator.word.sp
      push:
        - match: '({{identifier}})|(\()[ \t]*({{identifier}})[ \t]*(\))'
          captures:
            1: variable.other.constant.sp
            2: punctuation.section.group.begin.sp
            3: variable.other.constant.sp
            4: punctuation.section.group.end.sp
          pop: true
    - match: \bbreak\b
      scope: keyword.control.flow.break.sp
    - match: \bcontinue\b
      scope: keyword.control.flow.continue.sp
    - match: \breturn\b
      scope: keyword.control.flow.return.sp
    - match: '\b({{control_keywords}})\b'
      scope: keyword.control.conditional.sp
    - match: '\b(?:sizeof|cellsof|tagof)\b'
      scope: keyword.operator.word.sp
    - match: \b(new)\b
      scope: keyword.control.sp
      push:
        - match: '{{identifier}}(?=\s*\()'
          scope: support.class.sp
          pop: true
        - match: '{{identifier}}(?=\s*\[)'
          scope: storage.type.sp
          pop: true
        - match: (?=\S)
          pop: true

    - match: \b(?:delete)\b
      scope: keyword.control.sp
    - match: '\bthis\b'
      scope: variable.language

  operators:
    - match: (?:\+\+|--)
      scope: keyword.operator.arithmetic.sp
    - match: \+\=|-\=|\*\=|/\=|%\=|&\=|\|\=|\^\=|>>\=|<<\=
      scope: keyword.operator.assignment.augmented.sp
    - match: <<|>>|&&|\|\|
      scope: keyword.operator.arithmetic.sp
    - match: (&(?!=&)|\||\~|\<\<|\>\>|\^)=?
      scope: keyword.operator.bitwise
    - match: (?:<|>|\=|!)\=|<|>
      scope: keyword.operator.comparison.sp
    - match: \+|\-|/|%|\||\^|~|!|\*
      scope: keyword.operator.arithmetic.sp
    - match: \=
      scope: keyword.operator.assignment.sp
    - match: '\?|:(?!:)'
      scope: keyword.operator.ternary.sp
    - match: '\.\.\.'
      scope: keyword.operator.variadic.sp

  comments:
    - match: '\/\/'
      scope: comment.line.sp puncutation.definition.comment
      embed: sp_comment_doc
      embed_scope: comment.line.sp
      escape: '{{end_of_line}}'

    - match: (?<!\\)(\\\\)*\K\/\*
      scope: comment.block.documentation.sp punctuation.definition.comment.begin.sp
      embed: sp_comment_doc
      embed_scope: comment.block.documentation.sp
      escape: \*\/
      escape_captures:
        0: comment.block.documentation.sp punctuation.definition.comment.end.sp

  sp_comment_doc:
    - match: '(@)(deprecated|endsection|error|noreturn|note|return|section)\b'
      captures:
        1: punctuation.definition.keyword.sp
        2: keyword.other.documentation.sp
    - match: (@)(param)\b(?:\s+(\S+))?
      captures:
        1: punctuation.definition.keyword.sp
        2: keyword.other.documentation.param.sp
        3: variable.parameter.sp
    - match: '\b(TODO|FIXME|NOTE|BUG|XXX|HACK|IDEA|NOTICE)\b(?:\s*[-:])?'
      scope: keyword.other.documentation.note.sp

# ---------------------------------------------------------------------------

# Warning - Ugly zone ahead. Variable and function declarations. Shit's a mess.
# im neglecting static old syntax variable decl for my own sanity.
  variable-decl-oldsyntax:
    - match: (?<=^|[;\(\{\}]|\*\/)\s*(?:\b(new|decl)\b)
      scope: keyword.declaration.sp
      push:
        - match: ','
          scope: punctuation.separator.sp
        - match: '{{invalid_var_lookahead}}'
          pop: true

        - match: '({{identifier}})\s*(:)'
          captures:
            1: storage.type.sp
            2: punctuation.separator.sp
          push:
            - match: '{{invalid_var_lookahead}}'
              pop: true

            - match: '{{identifier}}'
              scope: variable.other.readwrite.sp
              set:
                - match: (?=,)
                  pop: true
                - match: '{{invalid_var_lookahead}}'
                  pop: true
                - include: brackets
                - match: '='
                  scope: keyword.operator.assignment.sp
                  set:
                    - match: '(?=,)'
                      pop: true

                    - match: '{{invalid_var_lookahead}}'
                      pop: true
                    - include: expressions

                - include: comments
            - include: comments

        - match: '{{identifier}}'
          scope: variable.other.readwrite.sp
          push:
            - match: (?=,)
              pop: true
            - include: brackets
            - match: '{{invalid_var_lookahead}}'
              pop: true
            - match: '='
              scope: keyword.operator.assignment.sp
              set:
                - match: '(?=,)'
                  pop: true
                - match: '{{invalid_var_lookahead}}'
                  pop: true
                - include: expressions

            - include: comments
            - match: '(?=[[:alpha:]_\.])'
              pop: true
        - include: comments

        - match: \S+
          scope: invalid.illegal.sp

  variable-decl:
    - match: '(?<=^|[;\(\{\}]|\*\/|\bstatic\b|\bconst\b)(?=\s*(?!{{local_lookahead}}|{{global_decl_lookahead}})({{identifier}}(?!\s*[^\[\w\s])))'
      branch_point: var_decl_begin
      branch:
        - - meta_scope: meta.variable.sp

          - match: '{{identifier}}'
            scope: storage.type.sp
            push:
              - match: \[
                scope: punctuation.section.brackets.begin.sp
                push:
                  - match: \]
                    scope: punctuation.section.brackets.end.sp
                    pop: true

                  - match: \S
                    fail: var_decl_begin

              - include: comments

              - match: '{{invalid_var_lookahead}}'
                fail: var_decl_begin

              - match: (?={{identifier}})
                push:
                  - match: ','
                    scope: punctuation.separator.sp

                  - include: comments
                  - match: '{{invalid_var_lookahead}}'
                    pop: 3

                  - match: '{{identifier}}'
                    scope: variable.other.readwrite.sp
                    push:
                      - match: (?=,)
                        pop: true
                      - match: (?=\s*\()
                        fail: var_decl_begin

                      - include: comments

                      - include: brackets

                      - match: (?=\s*{{identifier}})
                        pop: 4

                      - match: '{{invalid_var_lookahead}}'
                        pop: 4

                      - match: '='
                        scope: keyword.operator.assignment.sp
                        set:
                          - match: '(?=,)'
                            pop: true
                          - match: (?=;)
                            pop: 4
                          - match: '{{invalid_var_lookahead}}'
                            pop: 4
                          - include: expressions

                      # - include: comments

                      - match: '(?=[[:alpha:]_\.])'
                        pop: true

                  - include: comments

              - include: comments

              - match: (?=\S)
                fail: var_decl_begin

        - - match: '.'
            pop: true

# ---------------------------------------------------------------------------

  function-decl:
    - match: \bstock\b
      scope: keyword.declaration.sp

    - match: \b(?:static\b|const\b)
      scope: storage.modifier.sp

    - match: \s*(?:({{identifier}})\s*?(?:(:)|(\[)((?:\s*[^\]\s]+\s*)*)\s*(\]))?\s*)?({{identifier}}|{{operator}})\s*(?=\()
      captures:
        1: storage.type.sp
        2: punctuation.separator.sp
        3: punctuation.section.brackets.begin.sp
        4: invalid.illegal.sp
        5: punctuation.section.brackets.end.sp
        6: entity.name.function.sp
      push:
        - match: \(
          scope: punctuation.section.group.begin.sp
          set:
            - meta_content_scope: meta.function.parameters.sp
            - match: \)
              scope: punctuation.section.group.end.sp
              set:
                - match: (?=\{)
                  set:
                    - meta_content_scope: meta.function.sp
                    - match: \{
                      scope: meta.block.sp punctuation.section.block.begin.sp
                      set:
                        - meta_content_scope: meta.function.sp meta.block.sp
                        - match: \}
                          scope: meta.function.sp meta.block.sp punctuation.section.block.end.sp
                          pop: true
                        - include: expressions

                - include: comments
                - match: (?=[^\/\{\s]|$)
                  set:
                    - match: '$'
                      pop: true

            - include: function-params

  variable-usage-early:
    - match: ''
    - match: \b(?:([A-Z][A-Z_\d]+)|([A-Z]\w+)|({{identifier}}))(?=\s*\.(?!\s*\.))
      captures:
        1: variable.other.constant.sp
        2: storage.type.sp
        3: variable.other.readwrite.sp
    # - match: '{{identifier}}(?=\s*(?:[\+\-\*/^&%!]?=|[\[\<\>]))'
    #   scope: variable.other.readwrite.sp

  # variable-usage-late: # assumptions based on general var naming patterns
  #   - match: '\b[mg]_\w+\b' # member, global
  #     scope: variable.other.readwrite.sp
  #   - match: '\b[a-z_][a-z_\d]*\b' # all lowercase
  #     scope: variable.other.readwrite.sp
  #   - match: '\b[a-z]{1,2}[A-Z][a-z]\w+\b' # hungarian
  #     scope: variable.other.readwrite.sp
  #   - match: '\b[a-z]{4,}[A-Z][a-z]\w+\b' # camel case
  #     scope: variable.other.readwrite.sp
