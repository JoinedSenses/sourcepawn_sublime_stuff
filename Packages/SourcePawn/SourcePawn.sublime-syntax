%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: SourcePawn
file_extensions:
  - sp
  - inc
scope: source.sp

variables:
  numerals_binary: '\b0b[01]+\b'
  numerals_hex: '\b0x[0-9a-fA-F]{0,8}\b'
  numerals_intfloat: '\b\d+(\.\d*)?(e-?\d*)?\b'
  numerals: '{{numerals_binary}}|{{numerals_hex}}|{{numerals_intfloat}}'

  identifier: '(?:\b[[:alpha:]_]\w*\b)'
  modifier_decl: 'public[ \t]+native|stock|native|forward|static'
  # operator_method_name: '\boperator\s*[-+*/%^&|~!=<>]|[-+*/%^&|=!<>]=|<<=?|>>=?|&&|\|\||\+\+|--|,|->\*?|\(\)|\[\]'
  control_keywords: 'break|case|continue|default|do|else|for|if|return|switch|while'
  basic_types: 'any|bool|char|float|int|void'
  end_of_line: '(?<!\\)(\\\\)*\K$(?=\n)'
  str_format_char: '%[!\-\d\.]*[%bcdfiLNstTuxX]?'
  const_char_escape: \\(?:[abefnrt'"%\\]|(?:x[a-zA-Z0-9]{0,2}|\d+);?)

  global_decl_lookahead: (?=\s*(public|stock|static|forward|native|enum|struct|methodmap|typedef|typeset|functag|funcenum|new|decl)\b)
  local_lookahead: \b(?:if|else|for|while|do|return|switch|case|continue|break|delete|new|decl|static|const|sizeof|cellsof|tagof)\b
  invalid_var_lookahead: (?=[;\)\}])|{{global_decl_lookahead}}|(?={{local_lookahead}})|(?=\s*{{identifier}}(?:\s*\(|\s+{{identifier}}))

  # Overkill. I have a formatted version with comments for maintenance
  ALL_CONSTANTS: \b(?:T(?:E(?:MP_REQUIRE_EXTENSIONS|_EXPLFLAG_(?:DRAWALPHA|NO(?:ADDITIVE|DLIGHTS|FIREBALL(?:SMOKE)?|NE|PARTICLES|SOUND)|ROTATE))|F(?:Class_(?:DemoMan|Engineer|Heavy|Medic|Pyro|S(?:cout|niper|oldier|py)|Unknown)|Cond(?:Duration_Infinite|_(?:A(?:fterburnImmune|irCurrent)|B(?:alloonHead|l(?:ast(?:Immune|Jumping)|eeding)|onked|u(?:ffed|lletImmune|rningPyro))|C(?:harging|loak(?:Flicker|ed)|ompetitive(?:Loser|Winner)|rit(?:C(?:anteen|ola)|DemoCharge|Hype|Mmmph|On(?:Damage|F(?:irstBlood|lagCapture)|Kill|Win)|RuneTemp))|D(?:azed|e(?:adRingered|fenseBuff(?:Mmmph|NoCritBlock|ed)|moBuff|)|isguis(?:e(?:Removed|d(?:AsDispenser)?)|ing)|odgeChance)|EyeaductUnderworld|F(?:ireImmune|ocusBuff|reezeInput)|G(?:as|rappl(?:ed(?:(?:By|To)Player)|ingHook(?:Bleeding|Latched|SafeFall)?))|H(?:a(?:lloween(?:BombHead|CritCandy|G(?:hostMode|iant)|InHell|Kart(?:Cage|Dash|NoTurn)?|QuickHeal|SpeedBoost|T(?:hriller|iny))|sRune)|ealing(?:Debuff)?)|InHealRadius|Jarated|K(?:ing(?:Aura|Rune)|nockedIntoAir|ritzkrieged)|LostFooting|M(?:VMBotRadiowave|arkedForDeath(?:Silent)?|e(?:digunDebuff|gaHeal|leeOnly)|i(?:lked|niCritOnKill))|NoHealingDamageBuff|O(?:bscuredSmoke|nFire|verhealed)|P(?:a(?:rachute(?:Deployed)?|sstime(?:Interception|PenaltyDebuff))|lague(?:Rune)?|reventDeath)|R(?:adiusHealOnDamage|e(?:genBuffed|programmed|strictToMelee)|ocketPack|une(?:Agility|Haste|Imbalance|Knockout|Precision|Re(?:gen|sist)|Strength|Vampire|Warlock))|S(?:apped|lowed|mall(?:B(?:(?:last|ullet)Resist)|FireResist)|p(?:awnOutline|eedBuffAlly)|tealthed(?:UserBuffFade)?|upernovaRune|wimming(?:Curse|NoEffects))|T(?:aunting|eleport(?:edGlow|ing)|mpDamageBonus)|U(?:ber(?:(?:B(?:last|ullet)|Fire)Resist|charge(?:Fading|d(?:Canteen|Hidden|OnTakeDamage)?))|nknown[12])|Zoomed))|Holiday_(?:AprilFools|Birthday|C(?:hristmas|ommunityUpdate)|EndOfTheLine|FullMoon|Halloween(?:OrFullMoon(?:OrValentines)?)?|Invalid|MeetThePyro|ValentinesDay)|Object(?:Mode_(?:E(?:ntrance|xit)|None)|_(?:CartDispenser|Dispenser|S(?:apper|entry)|Teleporter))|Resource(?:Names|_(?:B(?:ackstabs|uildingsDestroyed)|Captures|D(?:e(?:aths|fenses)|ominations)|Hea(?:dshots|lPoints)|Invulns|KillAssists|MaxHealth|P(?:ing|layerClass)|Re(?:supplyPoints|venge)|Score|T(?:eleports|otalScore)))|Team_(?:Blue|Red|Spectator|Unassigned)|WeaponSlot_(?:Building|Grenade|Item[12]|Melee|P(?:DA|rimary)|Secondary)|_(?:C(?:ONDFLAG_(?:B(?:LEEDING|ONKED|UFFED)|C(?:HARGING|LOAK(?:ED|FLICKER)|RITCOLA)|D(?:AZED|E(?:ADRINGERED|FENSEBUFFED|MOBUFF)|ISGUIS(?:ED|ING))|HEALING|INHEALRADIUS|JARATED|KRITZKRIEGED|M(?:ARKEDFORDEATH|EGAHEAL|ILKED)|NONE|O(?:NFIRE|VERHEALED)|REGENBUFFED|SLOWED|T(?:AUNTING|ELEPORT(?:GLOW|ING))|UBERCHARGE(?:D|FADE)|ZOOMED)|USTOM_(?:A(?:EGIS_ROUND|IR_STICKY_BURST|XTINGUISHER_BOOSTED)|B(?:A(?:CKSTAB|SEBALL)|LEEDING|OOTS_STOMP|URNING(?:_(?:ARROW|FLARE))?)|C(?:A(?:NNONBALL_PUSH|RRIED_BUILDING)|HARGE_IMPACT|LEAVER(?:_CRIT)?|OMBO_PUNCH|ROC)|D(?:E(?:CAPITATION(?:_BOSS)?|FENSIVE_STICKY)|RAGONS_FURY_(?:BONUS_BURNING|IGNITE))|EYEBALL_ROCKET|F(?:ISH_KILL|L(?:ARE_(?:EXPLOSION|PELLET)|YINGBURN))|G(?:IANT_HAMMER|OLD_WRENCH)|HEADSHOT(?:_DECAPITATION)?|KART|M(?:ERASMUS_(?:DECAPITATION|GRENADE|PLAYER_BOMB|ZAP)|INIGUN)|P(?:ENETRATE_(?:ALL_PLAYERS|HEADSHOT|MY_TEAM)|ICKAXE|LA(?:SMA(?:_(?:CHARGED|GIB))?|YER_SENTRY)|RACTICE_STICKY|UMPKIN_BOMB)|R(?:OCKET_DIRECTHIT|UNE_REFLECT)|S(?:APPER_RECORDER_DEATH|HOTGUN_REVENGE_CRIT|LAP_KILL|PELL_(?:B(?:ATS|LASTJUMP)|FIREBALL|LIGHTNING|M(?:ETEOR|IRV|ONOCULUS)|SKELETON|T(?:ELEPORT|INY))|T(?:ANDARD_STICKY|ICKBOMB_EXPLOSION)|UICIDE)|T(?:AUNT(?:ATK_GASBLAST|_(?:A(?:LLCLASS_GUITAR_RIFF|R(?:MAGEDDON|ROW_STAB))|BARBARIAN_SWING|ENGINEER_(?:ARM|SMASH)|FENCING|GR(?:AND_SLAM|ENADE)|H(?:ADOUKEN|IGH_NOON)|UBERSLICE))|ELEFRAG|HROWABLE(?:_KILL)?|RIGGER_HURT)|WRENCH_FIX))|DEATHFLAG_(?:A(?:SSISTER(?:DOMINATION|REVENGE)|USTRALIUM)|DEADRINGER|FIRSTBLOOD|GIBBED|INTERRUPTED|KILLER(?:DOMINATION|REVENGE)|MINIBOSS|PURGATORY)|FLAGEVENT_(?:CAPTURED|D(?:EFENDED|ROPPED)|PICKEDUP|RETURNED)|STUNFLAG(?:S_(?:BIGBONK|GHOSTSCARE|LOSERSTATE|(?:NORMAL|SMALL)BONK)|_(?:BONKSTUCK|CHEERSOUND|GHOSTEFFECT|LIMITMOVEMENT|NOSOUNDOREFFECT|S(?:LOWDOWN|OUND)|THIRDPERSON))|WEAPON_(?:B(?:AT(?:_(?:FISH|GIFTWRAP|WOOD))?|O(?:NESAW|TTLE)|REAKABLE_SIGN|U(?:FF_ITEM|ILDER))|C(?:ANNON|HARGED_SMG|L(?:EAVER|UB)|OMPOUND_BOW|RO(?:SSBOW|WBAR))|D(?:I(?:RECTHIT|SPENSER(?:_GUN)?)|RG_POMSON)|F(?:I(?:REAXE|STS)|LA(?:ME(?:THROWER(?:_ROCKET)?|_BALL)|REGUN))|GR(?:APPLINGHOOK|ENADE(?:LAUNCHER|_(?:C(?:ALTROP|LEAVER|ONCUSSION)|DEMOMAN|EMP|GAS|HEAL|JAR(?:_(?:GAS|MILK))?|MIRV(?:BOMB|_DEMOMAN)?|N(?:A(?:IL|PALM)|ORMAL)|ORNAMENT|PIPEBOMB|S(?:MOKE_BOMB|T(?:ICKY_BALL|UNBALL))|THROWABLE|WATERBALLOON)))|HA(?:NDGUN_SCOUT_(?:PRIMARY|SEC)|RVESTER_SAW)|INVIS|JAR(?:_(?:GAS|MILK))?|KNIFE|L(?:ASER_POINTER|IFELINE|UNCHBOX)|M(?:E(?:CHANICAL_ARM|DIGUN)|INIGUN)|N(?:AILGUN|ONE)|P(?:A(?:R(?:ACHUTE|TICLE_CANNON)|SSTIME_GUN)|DA(?:_(?:ENGINEER_(?:BUILD|DESTROY)|SPY(?:_BUILD)?))?|EP_BRAWLER_BLASTER|I(?:PEBOMBLAUNCHER|STOL(?:_SCOUT)?)|UMPKIN_BOMB)|R(?:AYGUN(?:_REVENGE)?|EVOLVER|OCKET(?:LAUNCHER|PACK))|S(?:CATTERGUN|ENTRY_(?:BULLET|R(?:EVENGE|OCKET))|HO(?:TGUN_(?:BUILDING_RESCUE|HWG|P(?:RIMARY|YRO)|SOLDIER)|VEL)|LAP|MG|NIPERRIFLE(?:_(?:CLASSIC|DECAP))?|ODA_POPPER|PELLBOOK(?:_PROJECTILE)?|TICK(?:BOMB|Y_BALL_LAUNCHER)|WORD|YRINGEGUN_MEDIC)|T(?:HROWABLE|RANQ)|WRENCH)))|IMER_(?:(?:DATA_)?HNDL_CLOSE|FLAG_NO_MAPCHANGE|REPEAT)|est(?:Context|Number)|opMenu(?:Action_(?:D(?:isplay(?:Option|Title)|rawOption)|RemoveObject|SelectOption)|Object_(?:Category|Item)|Position_(?:Last(?:Category|Root)|Start)))|S(?:DK(?:C(?:all_(?:Entity(?:List)?|GameRules|Player|Raw|Static)|onf_(?:Address|Signature|Virtual))|Hook_(?:CanBeAutobalanced|FireBulletsPost|G(?:etMaxHealth|roundEntChangedPost)|(?:Blocked|EndTouch|OnTakeDamage(?:Alive)?|(?:Post|Pre)?Think|Reload|S(?:pawn|tartTouch)|T(?:ouch|raceAttack)|Use|VPhysicsUpdate|Weapon(?:Can(?:SwitchTo|Use)|Drop|Equip|Switch))(?:Post)?|SetTransmit|ShouldCollide)|Library_(?:Engine|Server)|Pass_(?:By(?:Ref|Value)|P(?:lain|ointer))|T(?:OOLS_DISABLE_SOUNDAPI|ype_(?:Bool|CBase(?:Entity|Player)|Edict|Float|PlainOldData|QAngle|String|Vector)))|EEK_(?:CUR|END|SET)|M(?:C(?:Error_(?:Custom|Invalid(?:Property1|Section[1-5]|Tokens)|Okay|Stream(?:Error|Open)|TokenOverflow)|Parse_(?:Continue|Halt(?:Fail)?))|_(?:PARAM_(?:COPYBACK|STRING_(?:BINARY|COPY|UTF8))|REPLY_TO_C(?:HAT|ONSOLE)))|ND(?:ATTN_(?:IDLE|NO(?:NE|RMAL)|RICOCHET|STATIC)|CHAN_(?:AUTO|BODY|ITEM|REPLACE|ST(?:ATIC|REAM)|USER_BASE|VOICE(?:_BASE)?|WEAPON)|LEVEL_(?:AIRCRAFT|C(?:AR|ONVO)|D(?:ISHWASHER|RYER)|FRIDGE|GUNFIRE|H(?:ELICOPTER|OME)|LIBRARY|MINIBIKE|NO(?:NE|RMAL)|R(?:AIDSIREN|OCKET|USTLE)|S(?:CREAMING|NOWMOBILE)|TR(?:AFFIC|AIN)|WHISPER)|PITCH_(?:HIGH|LOW|NORMAL)|VOL_NORMAL|_(?:CHANGE(?:PITCH|VOL)|DELAY|NOFLAGS|S(?:HOULDPAUSE|P(?:AWNING|EAKER)|TOP(?:LOOPING)?)))|OU(?:ND_FROM_(?:(?:LOCAL_)?PLAYER|WORLD)|RCE(?:MOD_(?:PLUGINAPI_VERSION|V(?:ERSION|_(?:CSET|M(?:AJOR|INOR)|RE(?:LEASE|V)|TAG))|)|_SDK_(?:ALIENSWARM|BLOODYGOODTIME|CS(?:GO|S)|D(?:ARKMESSIAH|OTA)|E(?:PISODE(?:1|2(?:VALVE)?)|YE)|LEFT4DEAD2?|ORIGINAL|UNKNOWN)))|P_(?:ERROR_(?:A(?:BORTED|RRAY_(?:BOUNDS|TOO_BIG))|D(?:ECOMPRESSOR|IVIDE_BY_ZERO)|FILE_FORMAT|HEAP(?:L(?:EAK|OW)|MIN)|IN(?:DEX|STRUCTION_PARAM|VALID_(?:ADDRESS|INSTRUCTION|NATIVE)|)|MEMACCESS|N(?:ATIVE|O(?:NE|T(?:DEBUGGING|_(?:FOUND|RUNNABLE)))|)|PARAM(?:S_MAX)?|STACK(?:L(?:EAK|OW)|MIN)|TRACKER_BOUNDS)|PARAMFLAG_BYREF)|URF_(?:BUMPLIGHT|HI(?:NT|TBOX)|LIGHT|NO(?:CHOP|D(?:ECALS|RAW)|LIGHT|PORTAL|SHADOWS)|SK(?:IP|Y(?:2D)?)|TR(?:ANS|IGGER)|WARP)|ort_(?:(?:A|De)scending|Float|Integer|Random|String))|C(?:O(?:MMAND_(?:FILTER_(?:ALIVE|CONNECTED|DEAD|NO_(?:BOTS|IMMUNITY|MULTI))|TARGET_(?:AMBIGUOUS|EMPTY_FILTER|IMMUNE|NO(?:NE|T_(?:ALIVE|DEAD|HUMAN|IN_GAME))))|NTENTS_(?:A(?:REAPORTAL|UX)|CURRENT_(?:0|180|270|90|DOWN|UP)|DE(?:BRIS|TAIL)|EMPTY|GRATE|HITBOX|IGNORE_NODRAW_OPAQUE|LADDER|M(?:IST|O(?:NSTER(?:CLIP)?|VEABLE))|O(?:PAQUE|RIGIN)|PLAYERCLIP|S(?:LIME|OLID)|T(?:E(?:AM[12]|STFOGVOLUME)|RANSLUCENT)|UNUSED[56]|W(?:ATER|INDOW)))|S(?:RoundEnd_(?:BombDefused|CT(?:S(?:toppedEscape|urrender)|Win|sReachedHostage)|Draw|GameStart|Hostages(?:Not)?Rescued|T(?:arget(?:Bomb|Sav)ed|errorist(?:Win|s(?:(?:Not)?Escaped|Planted|S(?:topped|urrender))))|VIP(?:(?:Not)?Escaped|Killed))|Weapon_(?:A(?:K47|SSAULTSUIT|UG|WP|XE)|B(?:AYONET|IZON|REACHCHARGE)|C(?:4|UTTERS|Z75A)|D(?:E(?:AGLE|COY|FUSER)|IVERSION)|ELITE|F(?:AMAS|I(?:REBOMB|STS|VESEVEN)|LASHBANG|RAGGRENADE)|G(?:3SG1|ALIL(?:AR)?|LOCK)|H(?:AMMER|E(?:A(?:LTHSHOT|VYASSAULTSUIT)|GRENADE)|KP2000)|INCGRENADE|K(?:EVLAR|NIFE(?:_(?:BUTTERFLY|F(?:ALCHION|LIP)|G(?:G|HOST|UT|YPSY_JACKKNIFE)|KARAMBIT|M9_BAYONET|PUSH|S(?:TILETTO|URVIVAL_BOWIE)|T(?:ATICAL)?|URSUS|WIDOWMAKER))?)|M(?:249|3|4A1(?:_SILENCER)?|A(?:C10|G7|X_WEAPONS(?:_NO_KNIFES)?)|ELEE|OLOTOV|P(?:5NAVY|[79]))|N(?:EGEV|IGHTVISION|O(?:NE|VA))|P(?:2(?:28|50)|90)|REVOLVER|S(?:AWEDOFF|C(?:AR(?:17|20)|OUT)|G55[026]|HIELD|MOKEGRENADE|NOWBALL|PANNER|SG08)|T(?:A(?:BLET|GGRENADE|SER)|EC9|MP)|UMP45|USP(?:_SILENCER)?|XM1014)|_(?:DMG_HEADSHOT|SLOT_(?:C4|GRENADE|KNIFE|PRIMARY|SECONDARY)|TEAM_(?:CT|NONE|SPECTATOR|T))|)|o(?:mmand_(?:Allow|Deny)|nVar(?:Bound_(?:Low|Upp)er|Query_(?:Not(?:Found|Valid)|Okay|Protected))|okie(?:Access_(?:P(?:r(?:ivate|otected)|ublic))|Menu(?:Action_(?:(?:Display|Select)Option)|_(?:(?:OnOff|YesNo)(?:_Int)?)|))))|F(?:BEAM_(?:END(?:ENTITY|VISIBLE)|F(?:ADE(?:IN|OUT)|OREVER)|HALOBEAM|ISACTIVE|NOTILE|ONLYNOISEONCE|S(?:HADE(?:IN|OUT)|INENOISE|OLID|TART(?:ENTITY|VISIBLE))|USE_HITBOXES)|CVAR_(?:A(?:CCESSIBLE_FROM_THREADS|RCHIVE(?:_(?:GAMECONSOLE|XBOX))?)|C(?:HEAT|LIENT(?:CMD_CAN_EXECUTE|DLL))|D(?:E(?:MO|VELOPMENTONLY)|ONTRECORD)|GAMEDLL|HIDDEN|MATERIAL_SYSTEM(?:_THREAD)?|N(?:EVER_AS_STRING|O(?:NE|T(?:IFY|_CONNECTED)))|PLUGIN|(?:R(?:INTABLEONLY|OTECTED))|RE(?:L(?:EASE|OAD_(?:MATERIALS|TEXTURES))|PLICATED)|S(?:ERVER_CAN(?:NOT_QUERY|_EXECUTE)|PONLY|S(?:_ADDED)?|)|U(?:N(?:LOGGED|REGISTERED)|SERINFO))|EATURECAP_(?:COMMANDLISTENER|PLAYERRUNCMD_11PARAMS)|L(?:OAT_PI|_(?:A(?:IMTARGET|TCONTROLS)|BASEVELOCITY|C(?:LIENT|ONVEYOR)|D(?:ISSOLVING|ONTTOUCH|UCKING)|E(?:DICT_(?:ALWAYS|CHANGED|D(?:IRTY_PVS_INFORMATION|ONTSEND)|F(?:REE|ULL(?:CHECK)?)|P(?:ENDING_DORMANT_CHECK|VSCHECK))|P2V_UNKNOWN1)|F(?:AKECLIENT|LY|R(?:EEZING|OZEN)|ULL_EDICT_CHANGED)|G(?:ODMODE|R(?:APHED|ENADE))|IN(?:RAIN|WATER)|KILLME|N(?:OTARGET|PC)|O(?:BJECT|N(?:FIRE|GROUND|TRAIN))|PARTIALGROUND|S(?:T(?:ATICPROP|EPMOVEMENT)|WIM)|TRANSRAGDOLL|UNBLOCKABLE_BY_PLAYER|W(?:ATERJUMP|ORLDBRUSH)))|PERM_[GOU]_(?:EXEC|READ|WRITE)|eature(?:Status_(?:Available|Un(?:available|known))|Type_(?:Capability|Native))|i(?:le(?:T(?:ime_(?:Created|Last(?:Access|Change))|ype_(?:Directory|File|Unknown)))|ndMap_(?:(?:Not)?Found|FuzzyMatch|NonCanonical|PossiblyAvailable)))|R(?:E(?:GEX_ERROR_(?:ASSERT|BAD(?:BR|COUNT|ENDIANNESS|LENGTH|M(?:AGIC|ODE)|NEWLINE|O(?:FFSET|PTION)|PA(?:RTIAL|T)|RPT|UTF8(?:_OFFSET)?)|CALLOUT|DFA_(?:BADRESTART|RECURSE|U(?:COND|ITEM|MLIMIT)|WSSIZE)|E(?:BRAC[EK]|C(?:OLLATE|TYPE)|ESCAPE|MPTY|PAREN|RANGE|S(?:IZE|PACE|UBREG))|IN(?:TERNAL|VARG)|JIT_(?:BADOPTION|STACKLIMIT)|MATCHLIMIT|NO(?:MATCH|MEMORY|NE|SUBSTRING)|NULL(?:WSLIMIT)?|PARTIAL|RECURS(?:ELOOP|IONLIMIT)|SHORTUTF8|UNKNOWN_OPCODE)|NDER(?:FX_(?:CLAMP_MIN_SCALE|DISTORT|E(?:NV_(?:RAIN|SNOW)|XPLODE)|F(?:ADE_(?:FAST|SLOW)|LICKER_(?:FAST|SLOW))|GLOWSHELL|HOLOGRAM|MAX|NO(?:NE|_DISSIPATION)|PULSE_(?:FAST(?:_WIDER?)?|SLOW(?:_WIDE)?)|RAGDOLL|S(?:OLID_(?:FAST|SLOW)|POTLIGHT|TROBE_(?:FAST(?:ER)?|SLOW)))|_(?:ENVIRONMENTAL|GLOW|NO(?:NE|RMAL)|TRANS(?:A(?:DD(?:FRAMEBLEND)?|LPHA(?:ADD)?)|COLOR|TEXTURE)|WORLDGLOW))|QUIRE_(?:EXTENSIONS|PLUGIN))|a(?:ngeType_(?:(?:Aud|Vis)ibility)|yType_(?:EndPoint|Infinite)|)|oundState_(?:B(?:etweenRounds|onus)|GameOver|Init|Pre(?:game|round)|R(?:estart|oundRunning)|Sta(?:lemate|rtGame)|TeamWin)|)|M(?:A(?:PLIST_FLAG_(?:CLEARARRAY|MAPSFOLDER|NO_DEFAULT)|SK_(?:ALL|(?:NPC|PLAYER)?(?:SOLID(?:_BRUSHONLY)?)|NPCWORLDSTATIC|OPAQUE(?:_AND_NPCS)?|S(?:HOT(?:_(?:HULL|PORTAL))?|PLITAREAPORTAL)|VISIBLE(?:_AND_NPCS)?|WATER)|X(?:PLAYERS|_(?:LIGHTSTYLES|(?:NAME|TARGET)_LENGTH)))|ENU(?:FLAG_(?:BUTTON_(?:EXIT(?:BACK)?|NOVOTE)|NO_SOUND)|_(?:ACTIONS_(?:ALL|DEFAULT)|NO_PAGINATION|TIME_FOREVER))|O(?:TDPANEL_TYPE_(?:FILE|INDEX|TEXT|URL)|VETYPE_(?:CUSTOM|FLY(?:GRAVITY)?|ISOMETRIC|LADDER|NO(?:CLIP|NE)|OBSERVER|PUSH|STEP|VPHYSICS|WALK))|a(?:pChange_(?:Instant|(?:Map|Round)End)|xClients)|enu(?:Action_(?:Cancel|Display(?:Item)?|DrawItem|End|S(?:elect|tart)|Vote(?:Cancel|End|Start)|)|Cancel_(?:Disconnected|Exit(?:Back)?|Interrupted|NoDisplay|Timeout)|End_(?:Cancelled|Exit(?:Back)?|Selected|Voting(?:Cancelled|Done))|S(?:ource_(?:External|No(?:ne|rmal)|RawPanel)|tyle_(?:Default|Radio|Valve))))|A(?:cces_(?:Effective|Real)|DM(?:FLAG_(?:BAN|C(?:H(?:A(?:NGEMAP|T)|EATS)|ON(?:FIG|VARS)|USTOM[1-6])|GENERIC|KICK|PASSWORD|R(?:CON|ESERVATION|OOT)|SLAY|UNBAN|VOTE)|INMENU_(?:(?:PLAYER|SERVER|VOTING)COMMANDS))|LL_VISIBLE_CONTENTS|PLRes_(?:(?:Silent)?Failure|Success)|UT(?:HMETHOD_(?:IP|NAME|STEAM)|OLOAD_EXTENSIONS)|ccess_(?:Effective|Real)|d(?:dress_Null|min(?:_(?:Ban|C(?:h(?:a(?:ngemap|t)|eats)|on(?:fig|vars)|ustom[1-6])|Generic|Kick|Password|R(?:CON|eservation|oot)|Slay|Unban|Vote)|Cache_(?:Admins|Groups|Overrides)|Flags_TOTAL))|uthId_(?:Engine|Steam(?:[23]|ID64)))|D(?:B(?:Bind_(?:Float|Int|String)|Prio_(?:High|Low|Normal)|Val_(?:Data|Error|Null|TypeMismatch))|ISPSURF_FLAG_(?:BUILDABLE|SURF(?:ACE|PROP[12])|WALKABLE)|MG_(?:A(?:CID|IRBOAT|LWAYSGIB)|B(?:LAST(?:_SURFACE)?|U(?:CKSHOT|LLET|RN))|C(?:LUB|R(?:IT|USH))|D(?:I(?:RECT|SSOLVE)|ROWN(?:RECOVER)?)|ENERGYBEAM|FALL|GENERIC|HALF_FALLOFF|IGNITE|N(?:E(?:RVEGAS|VERGIB)|OCLOSEDISTANCEMOD)|P(?:ARALYZE|HYSGUN|LASMA|OISON|REVENT_PHYSICS_FORCE)|R(?:ADI(?:ATION|US_MAX)|EMOVENORAGDOLL)|S(?:HOCK|L(?:ASH|OWBURN)|ONIC)|USE(?:DISTANCEMOD|_HITLOCATIONS)|VEHICLE)|ialogType_(?:AskConnect|Entry|M(?:enu|sg)|Text))|P(?:ARTITION_(?:NON_STATIC_EDICTS|S(?:OLID_EDICTS|TATIC_PROPS)|TRIGGER_EDICTS)|B_FIELD_NOT_REPEATED|CRE_(?:ANCHORED|CASELESS|DO(?:LLAR_ENDONLY|TALL)|EXTENDED|MULTILINE|NO(?:TEMPTY|_UTF8_CHECK)|U(?:CP|NGREEDY|TF8))|LA(?:TFORM_MAX_PATH|YER_FLAG_BITS)|a(?:ram_(?:A(?:ny|rray)|(?:Cell|Float)(?:ByRef)?|String|VarArgs)|th_SM)|l(?:Info_(?:Author|Description|Name|URL|Version)|ugin_(?:BadLoad|C(?:hanged|ontinue|reated)|E(?:rror|victed)|Failed|Handled|Loaded|Paused|Running|Stop|Uncompiled))|rop(?:Field_(?:Entity|Float|Integer|String(?:_T)?|Unsupported|V(?:ariant|ector))|_(?:Data|Send)))|I(?:N(?:VALID_(?:(?:ADMIN|GROUP|MESSAGE)_ID|ENT_REFERENCE|F(?:CVAR_FLAGS|UNCTION)|HANDLE|STRING_(?:INDEX|TABLE)|TOPMENUOBJECT)|_(?:A(?:LT[12]|TTACK(?:[23])?)|B(?:ACK|ULLRUSH)|CANCEL|DUCK|FORWARD|GRENADE[12]|JUMP|(?:MOVE)?LEFT|(?:MOVE)?RIGHT|R(?:ELOAD|UN)|S(?:CORE|PEED)|USE|W(?:ALK|EAPON[12])|ZOOM))|TEMDRAW_(?:CONTROL|D(?:EFAULT|ISABLED)|IGNORE|NOTEXT|RAWLINE|SPACER)|dentity_(?:Core|Extension|Plugin))|E(?:T_(?:Event|Hook|Ignore|Single)|ngine_(?:AlienSwarm|Bl(?:a(?:ckMesa|de)|oodyGoodTime)|C(?:S(?:GO|S)|ontagion)|D(?:O(?:DS|I|TA)|arkMessiah)|EYE|HL2DM|Insurgency|Left4Dead2?|NuclearDawn|Original|Portal2|S(?:DK2013|ourceSDK200[67])|TF2|Unknown)|ventHookMode_(?:Post(?:NoCopy)?|Pre))|V(?:DECODE_FLAG_(?:ALLOW(?:N(?:OTINGAME|ULL)|WORLD)|BYREF)|ENCODE_FLAG_COPYBACK|O(?:ICE_(?:LISTEN(?:ALL|TEAM)|MUTED|NORMAL|SPEAKALL|TEAM)|TE(?:FLAG_NO_REVOTES|INFO_(?:CLIENT_(?:I(?:NDEX|TEM))|ITEM_(?:INDEX|VOTES))))|oteCancel_(?:Generic|NoVotes))|N(?:ULL_(?:STRING|VECTOR)|etFlow_(?:Both|(?:Incom|Outgo)ing)|ominate_(?:A(?:dded|lreadyInVote)|InvalidMap|Replaced|VoteFull)|umberType_Int(?:8|16|32))|KvData_(?:Color|Float|Int|N(?:UMTYPES|one)|Ptr|String|UInt64|WString)|U(?:M_(?:(?:BitB|Protob)uf)|SERMSG_(?:BLOCKHOOKS|INITMSG|RELIABLE)|se_(?:O(?:ff|n)|Set|Toggle))|L(?:A(?:NG_SERVER|ST_VISIBLE_CONTENTS)|isten_(?:Default|No|Yes))|BANFLAG_(?:AUT(?:HID|O)|IP|NOKICK)|Override_Command(?:Group)?|QUERYCOOKIE_FAILED|__(?:DAT|TIM)E__)\b



# ---------------------------------------------------------------------------


# ---------------------------------------------------------------------------
contexts:
  main:
    # - match: ''
    - include: global
    - include: expressions

  global:
    - include: comments
    - include: preprocessor
    - include: enum
    - include: methodmap
    - include: functag
    - include: funcenum
    - include: typedef
    - include: typeset
    - include: native-forward
    - include: public
    - include: variable-decl-oldsyntax
    - include: function-decl # no multiline because this sucks to match.
    - include: variable-decl

  expressions:
    - include: early-expressions
    - include: late-expressions

  early-expressions:
    - include: preprocessor
    - include: comments
    - include: variable-decl-oldsyntax # this has to show up before 'new' is introduced
    - include: case-default
    - include: unique-keywords
    - include: constants
    - include: strings
    - include: operators
    - include: parens
    - include: brackets
    - include: braces
    - include: retag
    - include: accessor
    - include: variable-usage-early
    - match: ','
      scope: punctuation.separator.sp
    - match: '[\)\}\]]'
      scope: invalid.illegal.stray-bracket-end.sp

  late-expressions:
    - include: function-call
    - match: \b(?:static\b|const\b)
      scope: storage.modifier.sp
    - include: variable-decl
    # - include: variable-usage-late
    - match: ';'
      scope: punctuation.terminator.sp

#### Preprocessor
  preprocessor:
    - include: preprocessor-macro-define
    - include: preprocessor-pragma
    - include: preprocessor-other

  preprocessor-macro-define:
    - match: '^\s*(?:#(\s*)(define))\b\s*?'
      captures:
        1: invalid.illegal.unexpected-space.sp
        2: keyword.control.import.define.spf
      push:
        - meta_scope: meta.preprocessor.define.sp
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        - match: '{{end_of_line}}'
          pop: true

        - match: '(([^[:alpha:]_\(\s])?\S+?)(?=\()'
          captures:
            1: entity.name.function.sp
            2: invalid.illegal.invalid-character.sp
          set:
            - match: '\('
              scope: punctuation.section.group.begin.sp
              set: preprocessor-macro-params
            - match: '{{end_of_line}}'
              pop: true

        - match: '(([^[:alpha:]_\(\s])?\S+)(?=\s)'
          captures:
            1: entity.name.constant.sp
            2: invalid.illegal.invalid-character.sp
          set:
            - include: preprocessor-line-continuation
            - include: preprocessor-comments
            - include: expressions
            - match: '{{end_of_line}}'
              pop: true


  preprocessor-macro-params:
    - meta_scope: meta.preprocessor.macro.parameters.sp meta.group.sp
    - include: preprocessor-comments
    - include: preprocessor-line-continuation
    - match: '%\d+'
      scope: variable.parameter.sp
    - match: \)
      scope: punctuation.section.group.end.sp
      set: preprocessor-macro-definition
    - match: ','
      scope: punctuation.separator.sp
      push:
      - include: preprocessor-comments
      - include: preprocessor-line-continuation
      - match: '%\d+'
        scope: variable.parameter.sp
        pop: true
      - match: '(?=\))'
        pop: true
      - match: '\S+'
        scope: invalid.illegal.unexpected-character.sp

  preprocessor-macro-definition:
    - meta_content_scope: meta.preprocessor.macro.sp
    - include: preprocessor-line-continuation
    - include: preprocessor-comments
    - match: '{{end_of_line}}'
      pop: true
    - include: preprocessor-expressions


  preprocessor-expressions:
    - match: '{{end_of_line}}'
      pop: true

    - match: '%\d+'
      scope: variable.other.readwrite.sp
    - match: \(
      scope: punctuation.section.group.begin.sp
      push:
        - meta_scope: meta.group.sp
        - match: \)
          scope: punctuation.section.group.end.sp
          pop: true

        - include: preprocessor-expressions
    - match: \{
      scope: punctuation.section.braces.begin.sp
      push:
        - meta_scope: meta.block.sp
        - match: \}
          scope: punctuation.section.braces.end.sp
          pop: true

        - include: preprocessor-expressions
    - match: \[
      scope: punctuation.section.brackets.begin.sp
      push:
        - meta_scope: meta.brackets.sp
        - match: \]
          scope: punctuation.section.brackets.end.sp
          pop: true

        - include: preprocessor-expressions
    - include: expressions

  preprocessor-line-continuation:
    - match: '(?<!\\)(?:\\\\)*\K(\\)$(?=\n)'
      scope: punctuation.separator.continuation.sp
    - match: '(?<!\\)(?:\\\\)*\K(\\)([ \t]+?)$'
      captures:
        1: punctuation.separator.continuation.sp
        2: invalid.illegal.space-after-continuation.sp

  preprocessor-comments:
    - match: (?<!\\)(\\\\)*\K\/\*
      scope: punctuation.definition.comment.begin.sp
      push:
        - meta_scope: comment.block.sp
        - match: \*\/
          scope: punctuation.definition.comment.end.sp
          pop: true
    - match: \/\/
      scope: punctuation.definition.comment.sp
      push:
        - meta_scope: comment.line.double-slash.sp
        - match: (?:\\\\)*\K(\\)$(?=\n)
          scope: punctuation.separator.continuation.sp
        - match: '{{end_of_line}}'
          pop: true

  preprocessor-pragma:
    - match: '^[ \t]*(#)(\s*)(pragma)\b'
      captures:
        1: meta.preprocessor.sp
        2: invalid.illegal.unexpected-space.sp
        3: keyword.control.import.pragma.sp
      push:
        - meta_scope: meta.preprocessor.import.pragma.sp
        - include: preprocessor-line-continuation
        - include: preprocessor-comments

        - match: '{{end_of_line}}'
          pop: true

        - match: '\b(dynamic|semicolon|tabsize)([ \t]+\d*)?'
          captures:
            1: keyword.control.import.sp
            2: constant.numeric.integer.sp
          set: preprocessor_eol

        - match: \b(ctrlchar)([ \t]+(\')(?:([^\\'])|({{const_char_escape}}))?('))?
          captures:
            1: keyword.control.import.sp
            2: constant.character.escape.sp
            3: punctuation.definition.string.begin.sp
            4: constant.character.sp
            5: constant.character.escape.sp
            6: punctuation.definition.string.end.sp
          set: preprocessor_eol

        - match: '\b(unused)([ \t]+{{identifier}})?'
          captures:
            1: keyword.control.import.sp
            2: variable.other.sp
          set: preprocessor_eol

        - match: '\brational\b'
          scope: keyword.control.import.sp
          set: preprocessor_eol

        - match: '\b(newdecls(?:[ \t]+(?:required|optional)\b(?:$|[^\S]))?)'
          scope: keyword.control.import.sp
          set: preprocessor_eol

        - match: '\bdeprecated\b'
          scope: keyword.control.import.sp invalid.deprecated.sp
          set:
          - meta_content_scope: meta.preprocessor.pragma.deprecated.sp
          - match: '{{end_of_line}}'
            pop: true

        - match: \S
          push:
          - clear_scopes: true
          - match: '{{end_of_line}}'
            pop: true

  preprocessor_eol:
    - match: '{{end_of_line}}'
      pop: true
    - include: preprocessor-line-continuation
    - include: preprocessor-comments

  preprocessor-other:
    - match: '^[ \t]*(#(\s*)((?:else)?if))\b'
      captures:
        1: meta.preprocessor.sp
        2: invalid.illegal.unexpected-space.sp
        3: keyword.control.import.if.sp
      push:
        - meta_scope: meta.preprocessor.conditional.sp
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        - match: \bdefined\b
          scope: keyword.control.import.define.sp
          push:
            - match: '{{identifier}}'
              scope: variable.other.constant.sp
              pop: true
            - match: '{{end_of_line}}'
              pop: 2
        - include: constants
        - include: operators
        - match: '{{end_of_line}}'
          pop: true

    - match: '^[ \t]*(#(\s*)(undef))\b'
      captures:
        1: meta.preprocessor.sp
        2: invalid.illegal.unexpected-space.sp
        3: keyword.control.import.undef.sp
      push:
        - meta_scope: meta.preprocessor.sp
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        - match: '{{identifier}}'
          scope: variable.other.constant.sp
          push:
            - include: preprocessor-line-continuation
            - include: preprocessor-comments
            - match: \S+
              scope: invalid.illegal.unexpected-character.sp
            - match: '{{end_of_line}}'
              pop: true
        - match: '{{end_of_line}}'
          pop: true

    - match: '^[ \t]*(?:#(\s*)(endif|endinput|else))\b'
      captures:
        1: invalid.illegal.unexpected-space.sp
        2: keyword.control.import.if.sp
      push:
        - meta_scope: meta.preprocessor.conditional.sp
        - include: preprocessor-line-continuation
        - include: comments
        - match: (\S+?)(?=$|\/\*|\/\/|\b|\s)
          captures:
            1: invalid.illegal.unexpected-character.sp
        - match: '{{end_of_line}}'
          pop: true

    - match: '^[ \t]*(#(\s*)(error))\b'
      captures:
        1: meta.preprocessor.sp
        2: invalid.illegal.unexpected-space.sp
        3: keyword.control.import.error.sp
      push:
        - meta_scope: meta.preprocessor.diagnostic.sp
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        - include: strings
        - match: '{{end_of_line}}'
          pop: true

    - match: '^[ \t]*(#(\s*)((?:try)?include))\b'
      captures:
        1: meta.preprocessor.sp
        2: invalid.illegal.unexpected-space.sp
        3: keyword.control.import.include.sp
      push:
        - meta_scope: meta.preprocessor.sp
        - match: '{{end_of_line}}'
          pop: true
        - include: preprocessor-line-continuation
        - include: preprocessor-comments

        - match: (?<!\\)(\\\\)*\K\"
          scope: punctuation.definition.string.begin.sp
          set:
            - meta_scope: string.quoted.double.include.sp
            - match: (?:({{const_char_escape}})|(\\.))
              captures:
                1: constant.character.escape.sp
                2: invalid.illegal.unexpected-character.sp
            - match: (?<!\\)(\\\\)*\K\"
              scope: punctuation.definition.string.end.sp
              set: preprocessor_eol

        - match: '<'
          scope: punctuation.definition.string.begin.sp
          set:
            - meta_scope: string.quoted.other.lt-gt.include.sp
            - match: '>'
              scope: punctuation.definition.string.end.sp
              set: preprocessor_eol
            - match: '{{end_of_line}}'
              pop: true

        - match: (?=\S)
          set: preprocessor_eol

    - match: '^[ \t]*(#)'
      captures:
        1: meta.preprocessor.sp
      push:
        - match: '{{end_of_line}}'
          pop: true
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
### enum
  enum:
    - match: '(?<=^|[;\)\}]|\*\/)\s*enum\b'
      scope: storage.type.enum.sp keyword.declaration.enum.sp
      branch_point: enum_begin
      branch:
        - enum_definition
        - enum_end

  enum_end:
    - match: ''
      pop: true

  enum_definition:
    - include: comments

    - match: (?=\{)
      set: enum_contents

    - match: \bstruct\b
      scope: storage.type.struct keyword.declaration.struct.sp
      branch_point: enum_struct_begin
      branch:
      - enum_struct_type
      - enum_end

    - match: \(
      scope: punctuation.section.group.begin.sp
      push:
        - match: \)
          scope: punctuation.section.group.end.sp
          set:
            - match: (?=\{)
              set: enum_contents
            - match: (?=\S)
              fail: enum_begin
        - include: enum_increment

    - match: (?:({{identifier}})\s*(:)\s*)?({{identifier}})(?:\s*(:))?
      captures:
        1: storage.type.sp
        2: punctuation.separator.sp
        3: entity.name.enum.sp
        4: punctuation.separator.sp
      push:
        - include: comments
        - match: \(
          scope: punctuation.section.group.begin.sp
          push:
            - match: \)
              scope: punctuation.section.group.end.sp
              pop: true
            - include: enum_increment

        - match: (?=\{)
          set: enum_contents
        - match: (?=\S)
          fail: enum_begin

  enum_struct_type:
    - include: comments
    - match: '{{identifier}}'
      scope: entity.name.struct.enum.sp
      set:
        - match: \{
          scope: punctuation.section.braces.begin.sp
          set: enum_struct_contents
        - match: (?=\S)
          fail: enum_struct_begin

  enum_increment:
    - meta_content_scope: meta.group.enumincrement.sp

    - match: '(?:[\+\-\*\/]|\<\<|\>\>)\s*='
      scope: keyword.operator.assignment.augmented.sp
      push:
        - match: (?=\))
          pop: true
        - match: \d+
          scope: constant.numeric.integer.sp
          set:
            - match: (?=\))
              pop: true
            - match: '[^\s\)]+'
              scope: invalid.illegal.unexpected-character.sp
        - match: '[^\s\)]+'
          scope: invalid.illegal.unexpected-character.sp

    - match: '([\+\-\*\/]|<<?|>>?)'
      scope: keyword.operator.arithmetic.sp
      push:
        - match: (?=\)|=)
          pop: true
        - match: '[^\s\)]+'
          scope: invalid.illegal.unexpected-character.sp

    - match: '[^\s\)]+'
      scope: invalid.illegal.unexpected-character.sp

  enum_contents:
    - match: \{
      scope: punctuation.section.braces.begin.sp
      branch_point: enum_contents_begin
      branch:
        - enum_normal_contents
        - enum_oldstruct_contents

  enum_normal_contents:
    - meta_scope: meta.enum.sp meta.block.sp
    - match: '\}'
      scope: punctuation.section.braces.end.sp
      pop: 3

    - match: '{{identifier}}\s*:'
      fail: enum_contents_begin

    - match: ','
      scope: punctuation.separator.sp

    - match: '{{identifier}}'
      scope: entity.name.constant.enum.sp
      push:
        - include: comments

        - match: (?=,|\})
          pop: true

        - match: '='
          scope: keyword.operator.assignment.sp
          push:
            - match: (?=,|\})
              pop: 2

            - include: expressions

        - match: (?=\[)
          fail: enum_contents_begin

        - match: \s+(?=[[:alpha:]_])
          scope: invalid.illegal.missing-comma.sp
          pop: true

        - match: '[^\s,\}]+'
          scope: invalid.illegal.syntax.sp

    - include: comments
    - include: preprocessor

    - match: '[^\s,\}]+'
      scope: invalid.illegal.syntax.sp

  enum_oldstruct_contents:
    - meta_scope: meta.enumstruct.legacy.sp meta.block.sp
    - match: '\}'
      scope: punctuation.section.braces.end.sp
      pop: 3

    - match: ','
      scope: punctuation.separator.sp

    - match: '({{identifier}})\s*(:)'
      captures:
        1: storage.type.sp
        2: punctuation.separator.sp
      push: enum_oldstruct_variables

    - include: comments
    - include: preprocessor

    - match: (?=[[:alpha:]_])
      push: enum_oldstruct_variables

    - match: '[^\s\}]+'
      scope: invalid.illegal.syntax.sp

  enum_oldstruct_variables:
    - match: '(?=,|\})'
      pop: true

    - match: '{{identifier}}'
      scope: variable.other.member.sp
      set:
        - include: comments
        - match: ','
          scope: punctuation.separator.sp
          pop: true
        - match: (?=\})
          pop: true
        - include: brackets

        - match: \s+(?=[[:alpha:]_])
          scope: invalid.illegal.missing-comma.sp
          pop: true

        - match: \S+
          scope: invalid.illegal.syntax.sp

    - match: (?=\S)
      pop: true

  enum_struct_contents:
    - meta_scope: meta.enumstruct.sp meta.block.sp
    - match: '\}'
      scope: punctuation.section.braces.end.sp
      pop: 2

    - match: ';'
      scope: punctuation.terminator.sp

    - match: '^\s*((?:(?:public|static|const)\s+)*)(?={{identifier}})'
      captures:
        1: invalid.illegal.syntax.sp
      branch_point: enum_struct_variable_begin
      branch:
        - enum_struct_variable
        - enum_struct_function
        - enum_struct_variable_end

    - match: '^\s*(const|static|public)\b'
      captures:
        1: invalid.illegal.syntax.sp

    - include: comments
    - include: preprocessor

  enum_struct_variable:
    - meta_scope: meta.variable.sp
    - match: '{{identifier}}'
      scope: storage.type.sp
      push:
        - include: comments
        - match: '\['
          push:
            - meta_scope: invalid.illegal.syntax.sp
            - match: \]
              pop: true
            - include: comments
            - match: (?=\})
              pop: 3
        - match: (?=\})
          pop: 2
        - match: '(?=^\s*{{identifier}}\s+[[:alpha:]_\s])|[^[:alpha:]_\s]'
          pop: 2
        - match: '{{identifier}}'
          scope: variable.other.member.sp
          set:
            - match: (?=\})
              pop: 2
            - match: (?=\()
              fail: enum_struct_variable_begin
            - include: brackets
            - match: ';'
              scope: punctuation.terminator.sp
              pop: 2
            - include: comments
            - match: '[^[:alpha:]_\s;]+'
              scope: invalid.illegal.unexpected-character.sp
            - match: '(?=\s*[[:alpha:]_]|\})'
              pop: 2

  enum_struct_function:
    - match: '{{identifier}}'
      scope: meta.function.return-type.sp storage.type.sp
      push:
        - match: '{{identifier}}'
          scope: meta.function.sp entity.name.function.sp
          set:
            - match: \(
              scope: punctuation.section.group.begin.sp
              set:
                - meta_scope: meta.function.parameters.sp
                - match: \)
                  scope: punctuation.section.group.end.sp
                  set:
                    - match: (?=\{)
                      set: enum-function-definition-body
                    - include: comments
                    - match: '(?=\s*[[:alpha:]_]|\})'
                      pop: 2
                - include: function-params
            - include: comments
            - match: (?=\S)
              fail: enum_struct_variable_begin

  enum-function-definition-body:
    - meta_content_scope: meta.function.sp
    - match: '\{'
      scope: meta.block.sp punctuation.section.block.begin.sp
      set:
        - meta_content_scope: meta.function.sp meta.block.sp
        - match: '\}'
          scope: meta.function.sp meta.block.sp punctuation.section.block.end.sp
          pop: 2

        - include: expressions

  enum_struct_variable_end:
    - match: '.*?'
      scope: invalid.illegal.syntax.sp
      pop: true

### methodmap
  methodmap:
    - match: '(?<=^|[;\)\}]|\*\/)\s*methodmap\b'
      scope: storage.modifier.sp
      branch_point: methodmap_begin
      branch:
        - - match: '{{identifier}}'
            scope: entity.name.class.sp
            push:
              - meta_scope: meta.class.methodmap.sp
              - match: '<'
                scope: punctuation.separator.sp
                push:
                  - match: '{{identifier}}'
                    scope: entity.other.inherited-class.sp
                    set:
                      - match: (?=\{)
                        pop: true
                      - include: comments
                      - match: (?=\S)
                        fail: methodmap_begin
                  - include: comments
                  - match: (?=\S)
                    pop: true
              - match: '\{'
                scope: meta.block.sp punctuation.section.block.begin.sp
                set:
                  - meta_content_scope: meta.class.methodmap.sp meta.block.sp
                  - match: '\}'
                    scope: meta.class.methodmap.sp meta.block.sp punctuation.section.block.end.sp
                    pop: 2
                  - include: methodmap-body
              - include: comments
              - match: (?=\S)
                fail: methodmap_begin

        - - match: (?=\S)
            pop: true

  methodmap-body:
    - include: comments
    - include: methodmap-function-definition-body

    - match: '(?<=^|[;\)\}]|\*\/)\s*public\b'
      scope: storage.modifier.sp
      branch_point: methodmap_func_begin
      branch:
        - - match: '(?=\s*\b(public|property)\b|\}|[^[:alpha:]_\s])'
            pop: true

          - match: '\b(?:native|static)\b'
            scope: storage.modifier.sp
          - match: '\b(?:const)\b'
            scope: invalid.illegal.sp

          - match: '{{identifier}}'
            scope: meta.function.return-type.sp storage.type.sp
            push:
              - match: (?=\() # constructor
                fail: methodmap_func_begin

              - match: (?={{identifier}})
                branch_point: methodmap_func_name_begin
                branch:
                  - - match: '{{identifier}}'
                      scope: meta.function.sp entity.name.function.sp
                      push:
                        - match: \(
                          scope: punctuation.section.group.begin.sp
                          set:
                            - meta_scope: meta.function.parameters.sp
                            - match: \)
                              scope: punctuation.section.group.end.sp
                              pop: 4
                            - include: function-params
                        - include: comments
                        - match: \S
                          fail: methodmap_func_name_begin
                    - include: comments

                  - - match: ''
                      pop: 3
              - include: comments
              - match: '(?=\b(public|property)\b|\}|[^[:alpha:]_\s])'
                pop: true
          - include: comments

        - - meta_scope: meta.function.sp
          - match: '\b(?:native|static)\b'
            scope: storage.modifier.sp
          - match: '{{identifier}}'
            scope: entity.name.function.constructor.sp
            push:
              - match: \(
                scope: punctuation.section.group.begin.sp
                set:
                  - meta_scope: meta.function.parameters.sp
                  - match: \)
                    scope: punctuation.section.group.end.sp
                    pop: 2
                  - include: function-params
              - include: comments
              - match: (?=\S)
                fail: methodmap_func_begin
          - include: comments

        - - match: (?=\S)
            pop: true

    - match: '(?<=^|[;\)\}])\s*\bproperty\b'
      scope: storage.modifier.sp
      branch_point: property_begin
      branch:
        - - match: '(?=\s*\b(public|property)\b|\}|[^[:alpha:]_\s])'
            pop: true
          - match: '{{identifier}}'
            scope: storage.type.sp
            push:
              - match: '(?=\s*\b(public|property)\b|\}|[^[:alpha:]_\s])'
                pop: 2
              - match: '{{identifier}}'
                scope: entity.name.trait.sp
                set:
                - match: \{
                  scope: punctuation.section.braces.begin.sp
                  set:
                    - meta_scope: meta.block.sp
                    - match: \}
                      scope: punctuation.section.braces.end.sp
                      pop: 2
                    - match: (?<=^|;|\)|\})\s*\bpublic\b
                      scope: storage.modifier.sp
                      push:
                        - match: \bnative\b
                          scope: storage.modifier.sp
                        - match: '\bget\b'
                          scope: support.function.sp
                          set:
                          - match: \(
                            scope: punctuation.section.group.begin.sp
                            set:
                              - meta_scope: meta.group.sp
                              - match: \)
                                scope: punctuation.section.group.end.sp
                                pop: true
                              - match: \S
                                scope: invalid.illegal.sp
                          - include: comments
                          - match: (?=\S)
                            pop: true
                        - match: '\bset\b'
                          scope: support.function.sp
                          set:
                          - match: \(
                            scope: punctuation.section.group.begin.sp
                            set:
                              - meta_scope: meta.group.sp
                              - match: \)
                                scope: punctuation.section.group.end.sp
                                pop: true
                              - include: function-params
                          - include: comments
                          - match: (?=\S)
                            pop: true
                        - include: comments
                    - match: ';'
                      scope: punctuation.terminator.sp
                    - include: methodmap-function-definition-body
                    - include: comments
                - include: comments
        - - match: ''
            pop: true

    - include: preprocessor

  methodmap-function-definition-body:
    - meta_content_scope: meta.function.sp
    - match: '\{'
      scope: meta.block.sp punctuation.section.block.begin.sp
      push:
        - meta_content_scope: meta.function.sp meta.block.sp
        - match: '\}'
          scope: meta.function.sp meta.block.sp punctuation.section.block.end.sp
          pop: true

        - include: expressions

  function-definition-body:
    - meta_content_scope: meta.function.sp
    - match: \{
      scope: meta.block.sp punctuation.section.block.begin.sp
      set:
        - meta_content_scope: meta.function.sp meta.block.sp
        - match: \}
          scope: meta.function.sp meta.block.sp punctuation.section.block.end.sp
          pop: true

        - include: expressions

### public callbacks
  public:
    - match: (?<=^|[;\)\}]|\*\/)\s*public\b
      scope: storage.modifier.sp
      branch_point: public_begin
      branch:
        # public function, no type
        - - match: '{{identifier}}'
            scope: meta.function.sp support.function.sp
            push:
              - meta_content_scope: meta.function.parameters.sp
              - match: \(
                scope: punctuation.section.group.begin.sp
                set:
                  - meta_content_scope: meta.function.parameters.sp
                  - match: \)
                    scope: punctuation.section.group.end.sp
                    set:
                      - meta_content_scope: meta.function.sp
                      - match: \s*\{
                        scope: meta.block.sp punctuation.section.block.begin.sp
                        set:
                          - meta_content_scope: meta.function.sp meta.block.sp
                          - match: \}
                            scope: meta.function.sp meta.block.sp punctuation.section.block.end.sp
                            pop: 2
                          - include: expressions

                      - include: comments
                      - match: (?=\s*\S)
                        pop: 2

                  - include: function-params
              - match: \S
                fail: public_begin

        # public typed function
        - - match: ({{identifier}})(?:\s*(:))?
            captures:
              0: meta.function.return-type.sp
              1: storage.type.sp
              2: punctuation.separator.sp
            push:
              - meta_content_scope: meta.function.sp
              - match: '{{identifier}}'
                scope: support.function.sp
                set:
                  - meta_content_scope: meta.function.parameters.sp
                  - match: \(
                    scope: punctuation.section.group.begin.sp
                    set:
                      - meta_content_scope: meta.function.parameters.sp
                      - match: \)
                        scope: punctuation.section.group.end.sp
                        set:
                          - meta_content_scope: meta.function.sp
                          - match: \s*\{
                            scope: meta.block.sp punctuation.section.block.begin.sp
                            set:
                              - meta_content_scope: meta.function.sp meta.block.sp
                              - match: \}
                                scope: meta.function.sp meta.block.sp punctuation.section.block.end.sp
                                pop: 2
                              - include: expressions

                          - include: comments
                          - match: (?=\s*\S)
                            pop: 2
                      - include: function-params

                  - include: comments
                  - match: \S
                    fail: public_begin

              - include: comments
              - match: \S
                fail: public_begin

          - include: comments
          - match: \S
            fail: public_begin

         # struct
        - - match: ({{identifier}})(?:\s*(:))?
            captures:
              1: storage.type.sp
              2: punctuation.separator.sp
            push:
              - match: '{{identifier}}'
                scope: variable.other.sp
                set:
                  - match: '='
                    scope: keyword.operator.assignment.sp
                    set:
                      - match: \{
                        scope: punctuation.section.block.begin.sp
                        set:
                          - meta_scope: meta.block.struct.sp
                          - match: \}
                            scope: punctuation.section.block.end.sp
                            pop: 2

                          - match: ({{identifier}})
                            captures:
                              1: variable.other.member.sp
                            push:
                              - match: '='
                                scope: keyword.operator.assignment.sp
                                set:
                                  - match: (?=[,\}])
                                    pop: true
                                  - include: expressions

                                  - match: \s*(?={{identifier}}\s*=)
                                    scope: invalid.illegal.missing-comma.sp
                                    pop: true

                                  - include: preprocessor

                              - match: \s*(?={{identifier}}\s*=)
                                scope: invalid.illegal.missing-comma.sp
                                pop: true

                          - match: ','
                            scope: punctuation.separator.sp

                          - include: preprocessor
                          - include: comments

                      - include: comments
                      - match: (?=\S)
                        pop: 2

                  - match: '\S'
                    fail: public_begin

              - match: '\S' # try to match public func with no type (old syntax)
                fail: public_begin

          - include: comments

          - match: \S
            fail: public_begin

        - - match: ''
            pop: true

### typedef
  functag:
    - match: (?<=^|[;\)\}]|\*\/)\s*functag\b
      scope: keyword.declaration.sp
      push:
        - match: \bpublic\b
          scope: storage.modifier.sp
          set:
            - match: '{{identifier}}(?=\s*\()'
              scope: entity.name.type.sp
              set:
                - match: \(
                  scope: meta.function.parameters.sp punctuation.section.group.begin.sp
                  set:
                    - match: \)
                      scope: punctuation.section.group.end.sp
                      pop: true

                    - include: function-params
            - match: (?=\S)
              pop: true
        - match: (?=\S)
          pop: true

  funcenum:
    - match: (?<=^|[;\)\}]|\*\/)\s*funcenum\b
      scope: keyword.declaration.sp
      push:
        - match: '{{invalid_var_lookahead}}'
          pop: true
        - match: '{{identifier}}'
          scope: entity.name.type.sp
          set:
            - include: comments
            - match: \{
              scope: punctuation.section.block.begin.sp
              set:
                - meta_scope: meta.block.funcenum.sp
                - match: \}
                  scope: punctuation.section.block.end.sp
                  pop: true

                - include: comments

                - match: ','
                  scope: punctuation.separator.sp
                - match: (?:({{identifier}})\s*(:)\s*)?(public)\b(?=\()
                  captures:
                    1: storage.type.sp
                    2: punctuation.separator.sp
                    3: storage.modifier.sp
                  push:
                    - match: \(
                      scope: meta.function.parameters.sp punctuation.section.group.begin.sp
                      set:
                        - match: \)
                          scope: punctuation.section.group.end.sp
                          pop: true

                        - include: function-params
            - match: (?=\S)
              pop: true

  typedef:
    - match: (?<=^|[;\)\}]|\*\/)\s*typedef\b
      scope: keyword.declaration.sp
      branch_point: typedef_begin
      branch:
        - - include: comments
          - match: '{{identifier}}'
            scope: entity.name.type.sp
            push:
              - include: comments

              - match: '='
                scope: keyword.operator.assignment.sp
                set: typedef_function

              - match: (?=\S)
                fail: typedef_begin
        - - match: ''
            pop: true

  typedef_function:
    - include: comments

    - match: '\bfunction\b'
      scope: storage.modifier.sp
      branch_point: typedef_function_begin
      branch:
        - - include: comments

          - match: '{{identifier}}'
            scope: storage.type.sp
            push:
              - include: comments

              - match: \(
                scope: meta.function.parameters.sp punctuation.section.group.begin.sp
                set:
                  - match: \)
                    scope: punctuation.section.group.end.sp
                    pop: 2

                  - include: function-params

              - match: (?=\S)
                fail: typedef_function_begin
        - - match: ''
            pop: true

    - match: (?=\S)
      pop: 2

  typeset:
    - match: (?<=^|[;\)\}]|\*\/)\s*typeset\b
      scope: keyword.declaration.sp
      branch_point: typeset_begin
      branch:
        - - include: comments

          - match: '{{identifier}}'
            scope: entity.name.type.sp
            push:
              - include: comments
              - match: \{
                scope: punctuation.section.block.begin.sp
                set:
                  - meta_scope: meta.block.typeset.sp
                  - match: \}
                    scope: punctuation.section.block.end.sp
                    pop: 2

                  - include: comments
                  - include: typeset_function

              - match: (?=\S)
                fail: typeset_begin
        - - match: ''
            pop: true

  typeset_function:
    - include: comments

    - match: '(?<=^|[;\)\}]|\*\/)\s*function\b'
      scope: storage.modifier.sp
      branch_point: typeset_function_begin
      branch:
        - - include: comments
          - match: (?=\})|[^[:alpha:]_\s]+
            pop: true
          - match: '\bfunction\b'
            fail: typeset_function_begin
          - match: '{{identifier}}'
            scope: storage.type.sp
            push:
              - match: \(
                scope: meta.function.parameters.sp punctuation.section.group.begin.sp
                set:
                  - match: \)
                    scope: punctuation.section.group.end.sp
                    pop: 2
                  - include: function-params
              - include: comments
              - match: (?=\S)
                pop: 2
        - - match: ''
            pop: true

    - match: ';'
      scope: punctuation.terminator.sp

  typeset_function_type:
    - include: comments
    - match: (?=\})|[^[:alpha:]_\s]+
      pop: true
    - match: '\bfunction\b'
      fail: typeset_function_begin
    - match: '{{identifier}}'
      scope: storage.type.sp
      push:
        - include: comments

        - match: \(
          scope: meta.function.parameters.sp punctuation.section.group.begin.sp
          set:
            - match: \)
              scope: punctuation.section.group.end.sp
              pop: 2

            - include: function-params

        - match: (?=\S)
          pop: 2

### natives and forwards
  native-forward:
    - match: '(?<=^|[;\)\}]|\*\/)\s*(?:native|forward)'
      scope: storage.type.function keyword.declaration.function
      branch_point: native-forward-begin
      branch:
        # Typed eg - native int f(...) or forward bool:f(...)
        - - match: '({{identifier}})(?:\s*(:))?'
            captures:
              1: meta.function.return-type.sp storage.type.sp
              2: punctuation.separator.sp
            push:
              - match: '{{identifier}}'
                scope: meta.function.sp entity.name.function.sp
                set:
                  - match: \(
                    scope: meta.function.parameters.sp punctuation.section.group.begin.sp
                    set:
                      - match: \)
                        scope: punctuation.section.group.end.sp
                        pop: 2
                      - include: function-params
                  - include: comments
                  - match: \S
                    fail: native-forward-begin
              - include: comments
              - match: \S
                fail: native-forward-begin
          - include: comments

        - - match: '{{identifier}}'
            scope: entity.name.function.sp
            push:
              - match: \(
                scope: meta.function.parameters.sp punctuation.section.group.begin.sp
                set:
                  - match: \)
                    scope: punctuation.section.group.end.sp
                    pop: 2
                  - include: function-params
              - include: comments
              - match: \S
                fail: native-forward-begin
          - include: comments
          - match: \S
            fail: native-forward-begin

        - - match: ''
            pop: true

  function-params:
    - match: (?=\S)
      branch_point: function_param_begin
      branch:
      - function_param_old
      - function_param_new

  function_param_old:
    - match: (?=\))
      pop: true
    - match: ','
      scope: punctuation.separator.sp
      pop: true
    - match: '&(\s*&)*'
      scope: keyword.operator.reference.sp
      captures:
        1: invalid.illegal.sp
    - match: \bconst\b\s*
      scope: storage.modifier.sp
    - match: ({{identifier}})\s*(:)
      captures:
        1: storage.type.sp
        2: punctuation.separator.sp
      push:
        - match: (?=,|\))
          pop: true
        - match: '{{identifier}}'
          scope: variable.parameter.sp
          set:
            - match: (?=,|\))
              pop: true
            - include: brackets
            - match: '='
              scope: keyword.operator.assignment.sp
              set:
                - match: '(?=,|\))'
                  pop: true
                - include: expressions

                - match: '{{identifier}}'
                  scope: variable.other.constant.sp

            - include: comments
            - match: (?=\S)
              set:
                - match: (?=,|\))
                  pop: true
        - match: '\.\.\.'
          scope: keyword.operator.variadic.sp
          set:
            - match: (?=\))
              pop: true
            - match: ','
              scope: punctuation.separator.sp invalid.illegal.variadic-must-be-end.sp
              set:
                - match: (?=\))
                  pop: true
                - include: comments
            - include: comments
        - match: '\.{1,2}'
        - include: comments

    - match: '{{identifier}}'
      scope: variable.parameter.sp
      push:
        - match: (?=,|\))
          pop: true
        - include: brackets
        - match: '='
          scope: keyword.operator.assignment.sp
          set:
            - match: '(?=,|\))'
              pop: true
            - include: expressions
            - match: '{{identifier}}'
              scope: variable.other.constant.sp

        - include: comments
        - match: '(?=[[:alpha:]_\.])'
          fail: function_param_begin
    - include: comments

    - match: \S+
      scope: invalid.illegal.sp

  function_param_new:
    - match: (?=\))
      pop: true

    - match: ','
      scope: punctuation.separator.sp
      pop: true
    - match: '\bconst\b'
      scope: storage.modifier.sp
    - match: '{{identifier}}'
      scope: storage.type.sp
      push:
        - match: (?=,|\))
          pop: true
        - match: '\.\.\.'
          scope: keyword.operator.variadic.sp
          set:
            - match: (?=\))
              pop: true
            - match: ','
              scope: punctuation.separator.sp invalid.illegal.variadic-must-be-end.sp
              set:
                - match: (?=\))
                  pop: true
                - include: comments
            - include: comments
        - match: '\.{1,2}'
        - match: '\['
          scope: punctuation.section.brackets.begin.sp
          push:
            - meta_scope: meta.brackets.sp
            - match: \]
              scope: punctuation.section.brackets.end.sp
              pop: true
            - match: (?=,|\))
              pop: 2
            - include: comments
            - match: '[^\s\]]+'
              scope: invalid.illegal.sp
        - match: '&(\s*&)*'
          scope: keyword.operator.reference.sp
          captures:
            1: invalid.illegal.sp
        - match: '{{identifier}}'
          scope: variable.parameter.sp
          set:
            - match: (?=,|\))
              pop: true
            - include: brackets
            - match: '='
              scope: keyword.operator.assignment.sp
              set:
                - match: '(?=,|\))'
                  pop: true
                - include: expressions
                - match: '{{identifier}}'
                  scope: variable.other.constant.sp
            - include: comments
            - match: (?=\S)
              set:
                - match: (?=,|\))
                  pop: true
        - include: comments

        - match: '[^[;&,\)\s]]+'
          scope: invalid.illegal.sp

    - include: comments
    - match: '[^[;&,\)\s]]+'
      scope: invalid.illegal.sp

  accessor:
    - match: ({{identifier}})\s*(::)
      captures:
        1: storage.type
        2: punctuation.accessor.double-colon.sp
      push:
        - match: \s*{{identifier}}
          scope: variable.other.member.sp
          pop: true
        - match: (?=\s*\S)
          pop: true

    - match: \.\.(?!\.)
      scope: invalid.illegal.syntax.sp

    - match: \.
      scope: punctuation.accessor.dot.sp
      push:
        - match: (?=\s*{{identifier}}[ \t]{{identifier}})
          pop: true

        - match: '({{identifier}})\s*(?=\()'
          scope: variable.function.sp
          set:
            - match: \(
              scope: meta.group.sp punctuation.section.group.begin.sp
              set:
                - match: \)
                  scope: meta.group.sp punctuation.section.group.end.sp
                  pop: true
                - include: expressions

        - match: '{{identifier}}'
          scope: variable.other.member.sp
          pop: true

        - match: (?=\S)
          pop: true

    - match: \.(?!\.)
      scope: punctuation.accessor.sp

    - match: '{{identifier}}(?=\s*\.{3})'
      scope: variable.other.constant.sp

    # - match: \b(?:([A-Z][A-Z_\d]+)|([A-Z]\w+)|({{identifier}}))(?=\s*\.)
    #   captures:
    #     1: variable.other.constant.sp
    #     2: storage.type.sp
    #     3: variable.other.readwrite.sp

  function-call:
    - match: (?={{identifier}}\s*\()
      branch_point: function-call-begin
      branch:
        - - match: '(?={{local_lookahead}})'
            pop: true

          - meta_content_scope: meta.function-call.sp

          - match: '{{identifier}}'
            scope: variable.function.sp
            push:
              - match: (?=\()
                set:
                - match: \(
                  scope: meta.group.sp punctuation.section.group.begin.sp
                  set:
                    - match: \)
                      scope: meta.group.sp punctuation.section.group.end.sp
                      pop: 2
                    - include: expressions

              - match: (?=\S)
                fail: function-call-begin

        - - match: ''
            pop: true

  brackets:
    - match: \[
      scope: punctuation.section.brackets.begin.sp
      push:
        - meta_scope: meta.brackets.sp
        - match: \]
          scope: punctuation.section.brackets.end.sp
          pop: true

        - include: expressions

  parens:
    - match: \(
      scope: punctuation.section.group.begin.sp
      push:
        - meta_scope: meta.group.sp
        - match: \)
          scope: punctuation.section.group.end.sp
          pop: true

        - include: expressions

  braces:
    - match: \{
      scope: punctuation.section.braces.begin.sp
      push:
        - meta_scope: meta.block.sp
        - match: \}
          scope: punctuation.section.braces.end.sp
          pop: true

        - include: expressions

  case-default:
    - match: '\bdefault\b'
      scope: keyword.control.sp
      push:
        - match: ':'
          scope: punctuation.separator.sp
          pop: true

        - include: comments

        - match: '^\s*(?=$|\})'
          pop: true

        - match: \s+(?=[^\s:])
          scope: invalid.illegal.missing-comma.sp
          pop: true

    - match: '\bcase\b'
      scope: keyword.control.sp
      push:
        - match: ':'
          scope: punctuation.separator.sp
          pop: true
        - include: expressions
        - match: '{{identifier}}'
          scope: variable.other.constant

  retag:
    - match: \bview_as\b
      scope: keyword.operator.word.viewas.sp
      push:
        - match: '<'
          scope: punctuation.section.generic.begin.sp
          set:
            - match: '>'
              scope: punctuation.section.generic.end.sp
              pop: true

            - match: '{{identifier}}'
              scope: storage.type.sp

        - include: comments

        - match: (?=\S)
          pop: true

    - match: '({{identifier}})(:)(?![ \t]*:)'
      captures:
        1: storage.type.sp
        2: punctuation.separator.sp

  # https://github.com/alliedmodders/sourcepawn/blob/d919ffc892fb2c908990bd2307e79893bde220a9/compiler/parser.cpp#L1005
  constants:
    - match: '\b(true|false|null|EOS|INVALID_FUNCTION|cellmax|cellmin)\b'
      captures:
        1: constant.language.sp
    - match: \b(__LINE__|__Pawn|debug)\b
      captures:
        1: support.constant.sp
    - match: '{{numerals}}'
      scope: constant.numeric.sp
    - match: '{{ALL_CONSTANTS}}'
      scope: support.constant.sp
    - match: '\b[A-Z_][A-Z_\d]+\b'
      scope: variable.other.constant.sp

  strings:
    - include: const_char

    - match: (?<!\\)(\\\\)*\K\"
      scope: punctuation.definition.string.begin.sp
      push:
        - meta_scope: string.quoted.double.sp
        - match: (?<!\\)(\\\\)*\K\"
          scope: punctuation.definition.string.end.sp
          pop: true
        - match: '{{str_format_char}}'
          scope: constant.other.placeholder.sp
        - match: (?:({{const_char_escape}})|(\\.))
          captures:
            1: constant.character.escape.sp
            2: invalid.illegal.unexpected-character.sp

  const_char:
    - match: (?<!\\)(?:\\\\)*\K(\')(?:([^\\'])|({{const_char_escape}}))?(')
      captures:
        1: punctuation.definition.string.begin.sp
        2: constant.character.sp
        3: constant.character.escape.sp
        4: punctuation.definition.string.end.sp

    - match: (?<!\\)(?:\\{2})*\K(\')([^']+|')?
      captures:
        1: punctuation.definition.string.begin.sp
        2: invalid.illegal.unexpected-character.sp
      push:
        - meta_scope: string.quoted.single.sp
        - match: (?<!\\)(?:\\{2})*\K\'
          scope: punctuation.definition.string.end.sp
          pop: true

  unique-keywords:
    - match: \bbreak\b
      scope: keyword.control.flow.break.sp
    - match: \bcontinue\b
      scope: keyword.control.flow.continue.sp
    - match: \breturn\b
      scope: keyword.control.flow.return.sp
    - match: '\b({{control_keywords}})\b'
      scope: keyword.control.conditional.sp
    - match: '\b(?:sizeof|cellsof|tagof)\b'
      scope: keyword.operator.word.sp
    - match: \b(new)\b
      scope: keyword.control.sp
      push:
        - match: '{{identifier}}(?=\s*\()'
          scope: support.class.sp
          pop: true
        - match: '{{identifier}}(?=\s*\[)'
          scope: storage.type.sp
          pop: true
        - match: (?=\S)
          pop: true

    - match: \b(?:delete)\b
      scope: keyword.control.sp
    - match: '\bthis\b'
      scope: variable.language

  operators:
    - match: (?:\+\+|--)
      scope: keyword.operator.arithmetic.sp
    - match: \+\=|-\=|\*\=|/\=|%\=|&\=|\|\=|\^\=|>>\=|<<\=
      scope: keyword.operator.assignment.augmented.sp
    - match: <<|>>|&&|\|\|
      scope: keyword.operator.arithmetic.sp
    - match: (&(?!=&)|\||\~|\<\<|\>\>|\^)=?
      scope: keyword.operator.bitwise
    - match: (?:<|>|\=|!)\=|<|>
      scope: keyword.operator.comparison.sp
    - match: \+|\-|/|%|\||\^|~|!|\*
      scope: keyword.operator.arithmetic.sp
    - match: \=
      scope: keyword.operator.assignment.sp
    - match: '\?|:(?!:)'
      scope: keyword.operator.ternary.sp
    - match: '\.\.\.'
      scope: keyword.operator.variadic.sp

  comments:
    - match: '\/\/'
      scope: comment.line.sp puncutation.definition.comment
      embed: sp_comment_doc
      embed_scope: comment.line.sp
      escape: '{{end_of_line}}'

    - match: (?<!\\)(\\\\)*\K\/\*
      scope: comment.block.documentation.sp punctuation.definition.comment.begin.sp
      embed: sp_comment_doc
      embed_scope: comment.block.documentation.sp
      escape: \*\/
      escape_captures:
        0: comment.block.documentation.sp punctuation.definition.comment.end.sp

  sp_comment_doc:
    - match: '(@)(deprecated|endsection|error|noreturn|note|return|section)\b'
      captures:
        1: punctuation.definition.keyword.sp
        2: keyword.other.documentation.sp
    - match: (@)(param)\b(?:\s+(\S+))?
      captures:
        1: punctuation.definition.keyword.sp
        2: keyword.other.documentation.param.sp
        3: variable.parameter.sp
    - match: '\b(TODO|ToDo|FixMe|FIXME|NOTE|BUG|XXX|HACK|IDEA)\b(?:\s*[-:])?'
      scope: keyword.other.documentation.note.sp

# Warning - Ugly zone ahead. Variable and function declarations. Shit's a mess.
# im neglecting static old syntax variable decl for my own sanity.
  variable-decl-oldsyntax:
    - match: (?<=^|[;\(\{\}]|\*\/)\s*(?:\b(new|decl)\b)
      scope: keyword.declaration.sp
      push:
        - match: ','
          scope: punctuation.separator.sp
        - match: '{{invalid_var_lookahead}}'
          pop: true

        - match: '({{identifier}})\s*(:)'
          captures:
            1: storage.type.sp
            2: punctuation.separator.sp
          push:
            - match: '{{invalid_var_lookahead}}'
              pop: true

            - match: '{{identifier}}'
              scope: variable.other.readwrite.sp
              set:
                - match: (?=,)
                  pop: true
                - match: '{{invalid_var_lookahead}}'
                  pop: true
                - include: brackets
                - match: '='
                  scope: keyword.operator.assignment.sp
                  set:
                    - match: '(?=,)'
                      pop: true

                    - match: '{{invalid_var_lookahead}}'
                      pop: true
                    - include: expressions

                - include: comments
            - include: comments

        - match: '{{identifier}}'
          scope: variable.other.readwrite.sp
          push:
            - match: (?=,)
              pop: true
            - include: brackets
            - match: '{{invalid_var_lookahead}}'
              pop: true
            - match: '='
              scope: keyword.operator.assignment.sp
              set:
                - match: '(?=,)'
                  pop: true
                - match: '{{invalid_var_lookahead}}'
                  pop: true
                - include: expressions

            - include: comments
            - match: '(?=[[:alpha:]_\.])'
              pop: true
        - include: comments

        - match: \S+
          scope: invalid.illegal.sp

  variable-decl:
    - match: '(?<=^|[;\(\{\}]|\*\/|\bstatic\b|\bconst\b)(?=\s*(?!{{local_lookahead}}|{{global_decl_lookahead}})({{identifier}}(?!\s*\[\s*[^\s\]]))(?!\s*[^\[\w\s]))'
      branch_point: var_decl_begin
      branch:
        - - meta_scope: meta.variable.sp

          - match: '{{identifier}}'
            scope: storage.type.sp
            push:
              - match: \[
                scope: punctuation.section.brackets.begin.sp
                push:
                  - match: \]
                    scope: punctuation.section.brackets.end.sp
                    pop: true
                  - match: \S
                    fail: var_decl_begin

              - include: comments

              - match: '{{invalid_var_lookahead}}'
                fail: var_decl_begin

              - match: (?={{identifier}})
                push:
                  - match: ','
                    scope: punctuation.separator.sp

                  - include: comments
                  - match: '{{invalid_var_lookahead}}'
                    pop: 3

                  - match: '{{identifier}}'
                    scope: variable.other.readwrite.sp
                    push:
                      - match: (?=,)
                        pop: true
                      - match: (?=\s*\()
                        fail: var_decl_begin
                      - include: comments

                      - include: brackets

                      - match: (?=\s*{{identifier}})
                        pop: 4

                      - match: '{{invalid_var_lookahead}}'
                        pop: 4

                      - match: '='
                        scope: keyword.operator.assignment.sp
                        set:
                          - match: '(?=,)'
                            pop: true
                          - match: (?=;)
                            pop: 4
                          - match: '{{invalid_var_lookahead}}'
                            pop: 4
                          - include: expressions


                          

                      # - include: comments

                      - match: '(?=[[:alpha:]_\.])'
                        pop: true

                  - include: comments

              - include: comments

              - match: (?=\S)
                fail: var_decl_begin

        - - match: ''
            pop: true


  function-decl:
    - match: \bstock\b
      scope: keyword.declaration.sp

    - match: \b(?:static\b|const\b)
      scope: storage.modifier.sp

    - match: \s*(?:({{identifier}})\s*?(?:(:)|(\[)((?:\s*[^\]\s]+\s*)*)\s*(\]))?\s*)?({{identifier}}|\boperator)\s*(?=\()
      captures:
        1: storage.type.sp
        2: punctuation.separator.sp
        3: punctuation.section.brackets.begin.sp
        4: invalid.illegal.sp
        5: punctuation.section.brackets.end.sp
        6: entity.name.function.sp
      push:
        - match: \(
          scope: punctuation.section.group.begin.sp
          set:
            - meta_content_scope: meta.function.parameters.sp
            - match: \)
              scope: punctuation.section.group.end.sp
              set:
                - match: (?=\{)
                  set:
                    - meta_content_scope: meta.function.sp
                    - match: \{
                      scope: meta.block.sp punctuation.section.block.begin.sp
                      set:
                        - meta_content_scope: meta.function.sp meta.block.sp
                        - match: \}
                          scope: meta.function.sp meta.block.sp punctuation.section.block.end.sp
                          pop: true
                        - include: expressions

                - include: comments
                - match: (?=[^\/\{\s]|$)
                  set:
                    - match: '$'
                      pop: true

            - include: function-params

  variable-usage-early:
    - match: ''
    - match: \b(?:([A-Z][A-Z_\d]+)|([A-Z]\w+)|({{identifier}}))(?=\s*\.(?!\s*\.))
      captures:
        1: variable.other.constant.sp
        2: storage.type.sp
        3: variable.other.readwrite.sp
    # - match: '{{identifier}}(?=\s*(?:[\+\-\*/^&%!]?=|[\[\<\>]))'
    #   scope: variable.other.readwrite.sp

  # variable-usage-late: # assumptions based on general var naming patterns
  #   - match: '\b[mg]_\w+\b' # member, global
  #     scope: variable.other.readwrite.sp
  #   - match: '\b[a-z_][a-z_\d]*\b' # all lowercase
  #     scope: variable.other.readwrite.sp
  #   - match: '\b[a-z]{1,2}[A-Z][a-z]\w+\b' # hungarian
  #     scope: variable.other.readwrite.sp
  #   - match: '\b[a-z]{4,}[A-Z][a-z]\w+\b' # camel case
  #     scope: variable.other.readwrite.sp
